{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "domainSeparator",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "domainValue",
          "type": "bytes"
        }
      ],
      "name": "DomainRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "typeHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "typeStr",
          "type": "string"
        }
      ],
      "name": "RequestTypeRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "validUntilTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct IForwarder.ForwardRequest",
          "name": "forwardRequest",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "domainSeparator",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "requestTypeHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "suffixData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "ret",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        }
      ],
      "name": "registerDomainSeparator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "typeName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "typeSuffix",
          "type": "string"
        }
      ],
      "name": "registerRequestType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "validUntilTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct IForwarder.ForwardRequest",
          "name": "forwardRequest",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "domainSeparator",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "requestTypeHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "suffixData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "execute((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)": "e024dc7f",
    "getNonce(address)": "2d0335ab",
    "registerDomainSeparator(string,string)": "9c7b4592",
    "registerRequestType(string,string)": "d9210be5",
    "supportsInterface(bytes4)": "01ffc9a7",
    "verify((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)": "ad9f99c7"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"domainValue\",\"type\":\"bytes\"}],\"name\":\"DomainRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"typeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"typeStr\",\"type\":\"string\"}],\"name\":\"RequestTypeRegistered\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validUntilTime\",\"type\":\"uint256\"}],\"internalType\":\"struct IForwarder.ForwardRequest\",\"name\":\"forwardRequest\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"requestTypeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"suffixData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"ret\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"name\":\"registerDomainSeparator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"typeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"typeSuffix\",\"type\":\"string\"}],\"name\":\"registerRequestType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validUntilTime\",\"type\":\"uint256\"}],\"internalType\":\"struct IForwarder.ForwardRequest\",\"name\":\"forwardRequest\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"requestTypeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"suffixData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"execute((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)\":{\"params\":{\"domainSeparator\":\"The domain used when signing this request.\",\"forwardRequest\":\"All requested transaction parameters.\",\"requestTypeHash\":\"The request type used when signing this request.\",\"signature\":\"The client signature to be validated.\",\"suffixData\":\"The ABI-encoded extension data for the current `RequestType` used when signing this request.\"},\"returns\":{\"ret\":\"The byte array returned by the underlying `CALL` to the target address.\",\"success\":\"The success flag of the underlying `CALL` to the target address.\"}},\"getNonce(address)\":{\"params\":{\"from\":\"The address of a sender.\"},\"returns\":{\"_0\":\"The nonce for this address.\"}},\"registerDomainSeparator(string,string)\":{\"params\":{\"name\":\"The domain's display name.\",\"version\":\"The domain/protocol version.\"}},\"registerRequestType(string,string)\":{\"params\":{\"typeName\":\"The name of the request type.\",\"typeSuffix\":\"Any extra data after the generic params. Must contain add at least one param. The generic ForwardRequest type is always registered by the constructor.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"The Forwarder Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"execute((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)\":{\"notice\":\"Executes a transaction specified by the `ForwardRequest`. The transaction is first verified and then executed. The success flag and returned bytes array of the `CALL` are returned as-is. This method would revert only in case of a verification error. All the target errors are reported using the returned success flag and returned bytes array.\"},\"registerDomainSeparator(string,string)\":{\"notice\":\"Register a new domain separator.This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.The domain separator must have the following fields: `name`, `version`, `chainId`, `verifyingContract`. The `chainId` is the current network's `chainId`, and the `verifyingContract` is this Forwarder's address. This method accepts the domain name and version to create and register the domain separator value.\"},\"registerRequestType(string,string)\":{\"notice\":\"Register a new Request typehash.This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.\"},\"verify((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)\":{\"notice\":\"Verify the transaction is valid and can be executed. Implementations must validate the signature and the nonce of the request are correct. Does not revert and returns successfully if the input is valid. Reverts if any validation has failed. For instance, if either signature or nonce are incorrect. Reverts if `domainSeparator` or `requestTypeHash` are not registered as well.\"}},\"notice\":\"The contracts implementing this interface take a role of authorization, authentication and replay protection for contracts that choose to trust a `Forwarder`, instead of relying on a mechanism built into the Ethereum protocol.if the `Forwarder` contract decides that an incoming `ForwardRequest` is valid, it must append 20 bytes that represent the caller to the `data` field of the request and send this new data to the target address (the `to` field) :warning: **Warning** :warning: The Forwarder can have a full control over a `Recipient` contract. Any vulnerability in a `Forwarder` implementation can make all of its `Recipient` contracts susceptible! Recipient contracts should only trust forwarders that passed through security audit, otherwise they are susceptible to identity theft.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@opengsn/contracts/src/forwarder/IForwarder.sol\":\"IForwarder\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ensdomains/=node_modules/@ensdomains/\",\":@opengsn/=node_modules/@opengsn/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"node_modules/@opengsn/contracts/src/forwarder/IForwarder.sol\":{\"keccak256\":\"0x28669953bd3dcc98a5f959fa3cac97444584b6fbe59341681b9a59f11a83b171\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://a21d3f5fb9861fecd89da8aab73fc458e48bdfd2d7d9fd8a2f05b1afe54de278\",\"dweb:/ipfs/QmcNDQsr83ASBADBQmqdrvSvRt81rhUmyJwSVTu5is7WzW\"]},\"node_modules/@openzeppelin/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7b652499d098e88d8d878374616bb58434301061cae2253298b3f374044e0ddb\",\"dweb:/ipfs/QmbhAzctqo5jrSKU6idHdVyqfmzCcDbNUPvmx4GiXxfA6q\"]},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "domainSeparator",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "bytes",
              "name": "domainValue",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "DomainRegistered",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "typeHash",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "string",
              "name": "typeStr",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RequestTypeRegistered",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "struct IForwarder.ForwardRequest",
              "name": "forwardRequest",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "gas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "validUntilTime",
                  "type": "uint256"
                }
              ]
            },
            {
              "internalType": "bytes32",
              "name": "domainSeparator",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "requestTypeHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "suffixData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "execute",
          "outputs": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "ret",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getNonce",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "registerDomainSeparator"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "typeName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "typeSuffix",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "registerRequestType"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct IForwarder.ForwardRequest",
              "name": "forwardRequest",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "gas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "validUntilTime",
                  "type": "uint256"
                }
              ]
            },
            {
              "internalType": "bytes32",
              "name": "domainSeparator",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "requestTypeHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "suffixData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "verify"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "execute((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)": {
            "params": {
              "domainSeparator": "The domain used when signing this request.",
              "forwardRequest": "All requested transaction parameters.",
              "requestTypeHash": "The request type used when signing this request.",
              "signature": "The client signature to be validated.",
              "suffixData": "The ABI-encoded extension data for the current `RequestType` used when signing this request."
            },
            "returns": {
              "ret": "The byte array returned by the underlying `CALL` to the target address.",
              "success": "The success flag of the underlying `CALL` to the target address."
            }
          },
          "getNonce(address)": {
            "params": {
              "from": "The address of a sender."
            },
            "returns": {
              "_0": "The nonce for this address."
            }
          },
          "registerDomainSeparator(string,string)": {
            "params": {
              "name": "The domain's display name.",
              "version": "The domain/protocol version."
            }
          },
          "registerRequestType(string,string)": {
            "params": {
              "typeName": "The name of the request type.",
              "typeSuffix": "Any extra data after the generic params. Must contain add at least one param. The generic ForwardRequest type is always registered by the constructor."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "execute((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)": {
            "notice": "Executes a transaction specified by the `ForwardRequest`. The transaction is first verified and then executed. The success flag and returned bytes array of the `CALL` are returned as-is. This method would revert only in case of a verification error. All the target errors are reported using the returned success flag and returned bytes array."
          },
          "registerDomainSeparator(string,string)": {
            "notice": "Register a new domain separator.This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.The domain separator must have the following fields: `name`, `version`, `chainId`, `verifyingContract`. The `chainId` is the current network's `chainId`, and the `verifyingContract` is this Forwarder's address. This method accepts the domain name and version to create and register the domain separator value."
          },
          "registerRequestType(string,string)": {
            "notice": "Register a new Request typehash.This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712."
          },
          "verify((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)": {
            "notice": "Verify the transaction is valid and can be executed. Implementations must validate the signature and the nonce of the request are correct. Does not revert and returns successfully if the input is valid. Reverts if any validation has failed. For instance, if either signature or nonce are incorrect. Reverts if `domainSeparator` or `requestTypeHash` are not registered as well."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@ensdomains/=node_modules/@ensdomains/",
        "@opengsn/=node_modules/@opengsn/",
        "@openzeppelin/=node_modules/@openzeppelin/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "forge-std/=lib/forge-std/src/",
        "hardhat/=node_modules/hardhat/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "node_modules/@opengsn/contracts/src/forwarder/IForwarder.sol": "IForwarder"
      },
      "libraries": {}
    },
    "sources": {
      "node_modules/@opengsn/contracts/src/forwarder/IForwarder.sol": {
        "keccak256": "0x28669953bd3dcc98a5f959fa3cac97444584b6fbe59341681b9a59f11a83b171",
        "urls": [
          "bzz-raw://a21d3f5fb9861fecd89da8aab73fc458e48bdfd2d7d9fd8a2f05b1afe54de278",
          "dweb:/ipfs/QmcNDQsr83ASBADBQmqdrvSvRt81rhUmyJwSVTu5is7WzW"
        ],
        "license": "GPL-3.0-only"
      },
      "node_modules/@openzeppelin/contracts/interfaces/IERC165.sol": {
        "keccak256": "0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a",
        "urls": [
          "bzz-raw://7b652499d098e88d8d878374616bb58434301061cae2253298b3f374044e0ddb",
          "dweb:/ipfs/QmbhAzctqo5jrSKU6idHdVyqfmzCcDbNUPvmx4GiXxfA6q"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
        "urls": [
          "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
          "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "node_modules/@opengsn/contracts/src/forwarder/IForwarder.sol",
    "id": 57317,
    "exportedSymbols": {
      "IERC165": [
        62905
      ],
      "IForwarder": [
        57316
      ]
    },
    "nodeType": "SourceUnit",
    "src": "41:4886:116",
    "nodes": [
      {
        "id": 57225,
        "nodeType": "PragmaDirective",
        "src": "41:24:116",
        "nodes": [],
        "literals": [
          "solidity",
          ">=",
          "0.7",
          ".6"
        ]
      },
      {
        "id": 57226,
        "nodeType": "PragmaDirective",
        "src": "66:19:116",
        "nodes": [],
        "literals": [
          "abicoder",
          "v2"
        ]
      },
      {
        "id": 57227,
        "nodeType": "ImportDirective",
        "src": "87:56:116",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/interfaces/IERC165.sol",
        "file": "@openzeppelin/contracts/interfaces/IERC165.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 57317,
        "sourceUnit": 59373,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 57316,
        "nodeType": "ContractDefinition",
        "src": "1026:3900:116",
        "nodes": [
          {
            "id": 57245,
            "nodeType": "StructDefinition",
            "src": "1201:190:116",
            "nodes": [],
            "canonicalName": "IForwarder.ForwardRequest",
            "members": [
              {
                "constant": false,
                "id": 57232,
                "mutability": "mutable",
                "name": "from",
                "nameLocation": "1241:4:116",
                "nodeType": "VariableDeclaration",
                "scope": 57245,
                "src": "1233:12:116",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 57231,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1233:7:116",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 57234,
                "mutability": "mutable",
                "name": "to",
                "nameLocation": "1263:2:116",
                "nodeType": "VariableDeclaration",
                "scope": 57245,
                "src": "1255:10:116",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 57233,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1255:7:116",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 57236,
                "mutability": "mutable",
                "name": "value",
                "nameLocation": "1283:5:116",
                "nodeType": "VariableDeclaration",
                "scope": 57245,
                "src": "1275:13:116",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 57235,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1275:7:116",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 57238,
                "mutability": "mutable",
                "name": "gas",
                "nameLocation": "1306:3:116",
                "nodeType": "VariableDeclaration",
                "scope": 57245,
                "src": "1298:11:116",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 57237,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1298:7:116",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 57240,
                "mutability": "mutable",
                "name": "nonce",
                "nameLocation": "1327:5:116",
                "nodeType": "VariableDeclaration",
                "scope": 57245,
                "src": "1319:13:116",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 57239,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1319:7:116",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 57242,
                "mutability": "mutable",
                "name": "data",
                "nameLocation": "1348:4:116",
                "nodeType": "VariableDeclaration",
                "scope": 57245,
                "src": "1342:10:116",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_storage_ptr",
                  "typeString": "bytes"
                },
                "typeName": {
                  "id": 57241,
                  "name": "bytes",
                  "nodeType": "ElementaryTypeName",
                  "src": "1342:5:116",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_storage_ptr",
                    "typeString": "bytes"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 57244,
                "mutability": "mutable",
                "name": "validUntilTime",
                "nameLocation": "1370:14:116",
                "nodeType": "VariableDeclaration",
                "scope": 57245,
                "src": "1362:22:116",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 57243,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1362:7:116",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "ForwardRequest",
            "nameLocation": "1208:14:116",
            "scope": 57316,
            "visibility": "public"
          },
          {
            "id": 57251,
            "nodeType": "EventDefinition",
            "src": "1397:75:116",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "4bc68689cbe89a4a6333a3ab0a70093874da3e5bfb71e93102027f3f073687d8",
            "name": "DomainRegistered",
            "nameLocation": "1403:16:116",
            "parameters": {
              "id": 57250,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57247,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "domainSeparator",
                  "nameLocation": "1436:15:116",
                  "nodeType": "VariableDeclaration",
                  "scope": 57251,
                  "src": "1420:31:116",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 57246,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1420:7:116",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57249,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "domainValue",
                  "nameLocation": "1459:11:116",
                  "nodeType": "VariableDeclaration",
                  "scope": 57251,
                  "src": "1453:17:116",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 57248,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1453:5:116",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1419:52:116"
            }
          },
          {
            "id": 57257,
            "nodeType": "EventDefinition",
            "src": "1478:70:116",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "64d6bce64323458c44643c51fe45113efc882082f7b7fd5f09f0d69d2eedb202",
            "name": "RequestTypeRegistered",
            "nameLocation": "1484:21:116",
            "parameters": {
              "id": 57256,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57253,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "typeHash",
                  "nameLocation": "1522:8:116",
                  "nodeType": "VariableDeclaration",
                  "scope": 57257,
                  "src": "1506:24:116",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 57252,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1506:7:116",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57255,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "typeStr",
                  "nameLocation": "1539:7:116",
                  "nodeType": "VariableDeclaration",
                  "scope": 57257,
                  "src": "1532:14:116",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57254,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1532:6:116",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1505:42:116"
            }
          },
          {
            "id": 57265,
            "nodeType": "FunctionDefinition",
            "src": "1657:71:116",
            "nodes": [],
            "documentation": {
              "id": 57258,
              "nodeType": "StructuredDocumentation",
              "src": "1554:98:116",
              "text": " @param from The address of a sender.\n @return The nonce for this address."
            },
            "functionSelector": "2d0335ab",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getNonce",
            "nameLocation": "1666:8:116",
            "parameters": {
              "id": 57261,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57260,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "1683:4:116",
                  "nodeType": "VariableDeclaration",
                  "scope": 57265,
                  "src": "1675:12:116",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 57259,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1675:7:116",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1674:14:116"
            },
            "returnParameters": {
              "id": 57264,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57263,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 57265,
                  "src": "1719:7:116",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 57262,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1719:7:116",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1718:9:116"
            },
            "scope": 57316,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57280,
            "nodeType": "FunctionDefinition",
            "src": "2170:219:116",
            "nodes": [],
            "documentation": {
              "id": 57266,
              "nodeType": "StructuredDocumentation",
              "src": "1734:431:116",
              "text": " @notice Verify the transaction is valid and can be executed.\n Implementations must validate the signature and the nonce of the request are correct.\n Does not revert and returns successfully if the input is valid.\n Reverts if any validation has failed. For instance, if either signature or nonce are incorrect.\n Reverts if `domainSeparator` or `requestTypeHash` are not registered as well."
            },
            "functionSelector": "ad9f99c7",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "verify",
            "nameLocation": "2179:6:116",
            "parameters": {
              "id": 57278,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57269,
                  "mutability": "mutable",
                  "name": "forwardRequest",
                  "nameLocation": "2219:14:116",
                  "nodeType": "VariableDeclaration",
                  "scope": 57280,
                  "src": "2195:38:116",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ForwardRequest_$57245_calldata_ptr",
                    "typeString": "struct IForwarder.ForwardRequest"
                  },
                  "typeName": {
                    "id": 57268,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 57267,
                      "name": "ForwardRequest",
                      "nameLocations": [
                        "2195:14:116"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 57245,
                      "src": "2195:14:116"
                    },
                    "referencedDeclaration": 57245,
                    "src": "2195:14:116",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ForwardRequest_$57245_storage_ptr",
                      "typeString": "struct IForwarder.ForwardRequest"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57271,
                  "mutability": "mutable",
                  "name": "domainSeparator",
                  "nameLocation": "2251:15:116",
                  "nodeType": "VariableDeclaration",
                  "scope": 57280,
                  "src": "2243:23:116",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 57270,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2243:7:116",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57273,
                  "mutability": "mutable",
                  "name": "requestTypeHash",
                  "nameLocation": "2284:15:116",
                  "nodeType": "VariableDeclaration",
                  "scope": 57280,
                  "src": "2276:23:116",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 57272,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2276:7:116",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57275,
                  "mutability": "mutable",
                  "name": "suffixData",
                  "nameLocation": "2324:10:116",
                  "nodeType": "VariableDeclaration",
                  "scope": 57280,
                  "src": "2309:25:116",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 57274,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2309:5:116",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57277,
                  "mutability": "mutable",
                  "name": "signature",
                  "nameLocation": "2359:9:116",
                  "nodeType": "VariableDeclaration",
                  "scope": 57280,
                  "src": "2344:24:116",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 57276,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2344:5:116",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2185:189:116"
            },
            "returnParameters": {
              "id": 57279,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2388:0:116"
            },
            "scope": 57316,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57299,
            "nodeType": "FunctionDefinition",
            "src": "3403:272:116",
            "nodes": [],
            "documentation": {
              "id": 57281,
              "nodeType": "StructuredDocumentation",
              "src": "2395:1003:116",
              "text": " @notice Executes a transaction specified by the `ForwardRequest`.\n The transaction is first verified and then executed.\n The success flag and returned bytes array of the `CALL` are returned as-is.\n This method would revert only in case of a verification error.\n All the target errors are reported using the returned success flag and returned bytes array.\n @param forwardRequest All requested transaction parameters.\n @param domainSeparator The domain used when signing this request.\n @param requestTypeHash The request type used when signing this request.\n @param suffixData The ABI-encoded extension data for the current `RequestType` used when signing this request.\n @param signature The client signature to be validated.\n @return success The success flag of the underlying `CALL` to the target address.\n @return ret The byte array returned by the underlying `CALL` to the target address."
            },
            "functionSelector": "e024dc7f",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "execute",
            "nameLocation": "3412:7:116",
            "parameters": {
              "id": 57293,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57284,
                  "mutability": "mutable",
                  "name": "forwardRequest",
                  "nameLocation": "3453:14:116",
                  "nodeType": "VariableDeclaration",
                  "scope": 57299,
                  "src": "3429:38:116",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ForwardRequest_$57245_calldata_ptr",
                    "typeString": "struct IForwarder.ForwardRequest"
                  },
                  "typeName": {
                    "id": 57283,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 57282,
                      "name": "ForwardRequest",
                      "nameLocations": [
                        "3429:14:116"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 57245,
                      "src": "3429:14:116"
                    },
                    "referencedDeclaration": 57245,
                    "src": "3429:14:116",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ForwardRequest_$57245_storage_ptr",
                      "typeString": "struct IForwarder.ForwardRequest"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57286,
                  "mutability": "mutable",
                  "name": "domainSeparator",
                  "nameLocation": "3485:15:116",
                  "nodeType": "VariableDeclaration",
                  "scope": 57299,
                  "src": "3477:23:116",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 57285,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3477:7:116",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57288,
                  "mutability": "mutable",
                  "name": "requestTypeHash",
                  "nameLocation": "3518:15:116",
                  "nodeType": "VariableDeclaration",
                  "scope": 57299,
                  "src": "3510:23:116",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 57287,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3510:7:116",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57290,
                  "mutability": "mutable",
                  "name": "suffixData",
                  "nameLocation": "3558:10:116",
                  "nodeType": "VariableDeclaration",
                  "scope": 57299,
                  "src": "3543:25:116",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 57289,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3543:5:116",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57292,
                  "mutability": "mutable",
                  "name": "signature",
                  "nameLocation": "3593:9:116",
                  "nodeType": "VariableDeclaration",
                  "scope": 57299,
                  "src": "3578:24:116",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 57291,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3578:5:116",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3419:189:116"
            },
            "returnParameters": {
              "id": 57298,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57295,
                  "mutability": "mutable",
                  "name": "success",
                  "nameLocation": "3648:7:116",
                  "nodeType": "VariableDeclaration",
                  "scope": 57299,
                  "src": "3643:12:116",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 57294,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3643:4:116",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57297,
                  "mutability": "mutable",
                  "name": "ret",
                  "nameLocation": "3670:3:116",
                  "nodeType": "VariableDeclaration",
                  "scope": 57299,
                  "src": "3657:16:116",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 57296,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3657:5:116",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3642:32:116"
            },
            "scope": 57316,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57307,
            "nodeType": "FunctionDefinition",
            "src": "4109:92:116",
            "nodes": [],
            "documentation": {
              "id": 57300,
              "nodeType": "StructuredDocumentation",
              "src": "3681:423:116",
              "text": " @notice Register a new Request typehash.\n @notice This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.\n @param typeName The name of the request type.\n @param typeSuffix Any extra data after the generic params. Must contain add at least one param.\n The generic ForwardRequest type is always registered by the constructor."
            },
            "functionSelector": "d9210be5",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "registerRequestType",
            "nameLocation": "4118:19:116",
            "parameters": {
              "id": 57305,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57302,
                  "mutability": "mutable",
                  "name": "typeName",
                  "nameLocation": "4154:8:116",
                  "nodeType": "VariableDeclaration",
                  "scope": 57307,
                  "src": "4138:24:116",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57301,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "4138:6:116",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57304,
                  "mutability": "mutable",
                  "name": "typeSuffix",
                  "nameLocation": "4180:10:116",
                  "nodeType": "VariableDeclaration",
                  "scope": 57307,
                  "src": "4164:26:116",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57303,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "4164:6:116",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4137:54:116"
            },
            "returnParameters": {
              "id": 57306,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4200:0:116"
            },
            "scope": 57316,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 57315,
            "nodeType": "FunctionDefinition",
            "src": "4835:89:116",
            "nodes": [],
            "documentation": {
              "id": 57308,
              "nodeType": "StructuredDocumentation",
              "src": "4207:623:116",
              "text": " @notice Register a new domain separator.\n @notice This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.\n @notice The domain separator must have the following fields: `name`, `version`, `chainId`, `verifyingContract`.\n The `chainId` is the current network's `chainId`, and the `verifyingContract` is this Forwarder's address.\n This method accepts the domain name and version to create and register the domain separator value.\n @param name The domain's display name.\n @param version The domain/protocol version."
            },
            "functionSelector": "9c7b4592",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "registerDomainSeparator",
            "nameLocation": "4844:23:116",
            "parameters": {
              "id": 57313,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 57310,
                  "mutability": "mutable",
                  "name": "name",
                  "nameLocation": "4884:4:116",
                  "nodeType": "VariableDeclaration",
                  "scope": 57315,
                  "src": "4868:20:116",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57309,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "4868:6:116",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 57312,
                  "mutability": "mutable",
                  "name": "version",
                  "nameLocation": "4906:7:116",
                  "nodeType": "VariableDeclaration",
                  "scope": 57315,
                  "src": "4890:23:116",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 57311,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "4890:6:116",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4867:47:116"
            },
            "returnParameters": {
              "id": 57314,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4923:0:116"
            },
            "scope": 57316,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 57229,
              "name": "IERC165",
              "nameLocations": [
                "1050:7:116"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 62905,
              "src": "1050:7:116"
            },
            "id": 57230,
            "nodeType": "InheritanceSpecifier",
            "src": "1050:7:116"
          }
        ],
        "canonicalName": "IForwarder",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 57228,
          "nodeType": "StructuredDocumentation",
          "src": "145:880:116",
          "text": " @title The Forwarder Interface\n @notice The contracts implementing this interface take a role of authorization, authentication and replay protection\n for contracts that choose to trust a `Forwarder`, instead of relying on a mechanism built into the Ethereum protocol.\n @notice if the `Forwarder` contract decides that an incoming `ForwardRequest` is valid, it must append 20 bytes that\n represent the caller to the `data` field of the request and send this new data to the target address (the `to` field)\n :warning: **Warning** :warning: The Forwarder can have a full control over a `Recipient` contract.\n Any vulnerability in a `Forwarder` implementation can make all of its `Recipient` contracts susceptible!\n Recipient contracts should only trust forwarders that passed through security audit,\n otherwise they are susceptible to identity theft."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          57316,
          62905
        ],
        "name": "IForwarder",
        "nameLocation": "1036:10:116",
        "scope": 57317,
        "usedErrors": []
      }
    ],
    "license": "GPL-3.0-only"
  },
  "id": 116
}