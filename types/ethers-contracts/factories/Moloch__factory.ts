/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Moloch, MolochInterface } from "../Moloch";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "member",
        type: "address",
      },
    ],
    name: "addMember",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "member",
        type: "address",
      },
    ],
    name: "members",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "delegateKey",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "shares",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "loot",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "exists",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "highestIndexYesVote",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "jailed",
            type: "uint256",
          },
        ],
        internalType: "struct IMoloch.Member",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061025f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806308ae4b0c1461003b578063ca6d56dc146100a9575b600080fd5b61004e6100493660046101f9565b61014d565b6040516100a0919081516001600160a01b0316815260208083015190820152604080830151908201526060808301511515908201526080808301519082015260a0918201519181019190915260c00190565b60405180910390f35b61014b6100b73660046101f9565b6040805160c0810182526000808252600560208084018281528486018381526001606087018181526080880182815260a089018381526001600160a01b039b8c1689529588905298909620965187546001600160a01b031916991698909817865590519685019690965594516002840155905160038301805460ff1916911515919091179055915160048201559151910155565b005b6101916040518060c0016040528060006001600160a01b03168152602001600081526020016000815260200160001515815260200160008152602001600081525090565b506001600160a01b0390811660009081526020818152604091829020825160c08101845281549094168452600181015491840191909152600281015491830191909152600381015460ff1615156060830152600481015460808301526005015460a082015290565b60006020828403121561020b57600080fd5b81356001600160a01b038116811461022257600080fd5b939250505056fea2646970667358221220001c7eb56d5669172cae76bbebb1f981905e8c63c2507d528fe77bd40bfa6bda64736f6c63430008130033";

type MolochConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MolochConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Moloch__factory extends ContractFactory {
  constructor(...args: MolochConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: string }): Promise<Moloch> {
    return super.deploy(overrides || {}) as Promise<Moloch>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Moloch {
    return super.attach(address) as Moloch;
  }
  override connect(signer: Signer): Moloch__factory {
    return super.connect(signer) as Moloch__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MolochInterface {
    return new utils.Interface(_abi) as MolochInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Moloch {
    return new Contract(address, _abi, signerOrProvider) as Moloch;
  }
}
