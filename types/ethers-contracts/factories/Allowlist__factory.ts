/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Allowlist, AllowlistInterface } from "../Allowlist";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AlreadyDepolyedANova",
    type: "error",
  },
  {
    inputs: [],
    name: "AlreadyPlusOne",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "Unallowed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "AddedToAllowList",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "RemovedFromAllowList",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "addrsToAdd_",
        type: "address[]",
      },
    ],
    name: "addBatchToAllowlist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
    ],
    name: "addOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addrToAdd_",
        type: "address",
      },
    ],
    name: "addToAllowlist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addr",
        type: "address",
      },
    ],
    name: "isAllowed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isOwner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "addrs_",
        type: "address[]",
      },
    ],
    name: "removeBatchFromAllowlist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addrToAdd_",
        type: "address",
      },
    ],
    name: "removeFromAllowlist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50336000908152602081905260409020805460ff19166001179055610a598061003a6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637065cb481161005b5780637065cb48146100e1578063846be7ed146100f4578063babcc53914610107578063f8e86ece1461013357600080fd5b80632f54bf6e14610082578063519cecce146100b95780635da93d7e146100ce575b600080fd5b6100a56100903660046108ec565b60006020819052908152604090205460ff1681565b604051901515815260200160405180910390f35b6100cc6100c7366004610924565b610146565b005b6100cc6100dc3660046108ec565b610388565b6100cc6100ef3660046108ec565b61047d565b6100cc610102366004610924565b610543565b6100a56101153660046108ec565b6001600160a01b031660009081526001602052604090205460ff1690565b6100cc6101413660046108ec565b61077a565b3360009081526001602052604090205460ff16801561017757506000356001600160e01b031916637c74376760e11b145b1561028357336000908152600260205260409020546001600160a01b0316156101b35760405163b1e153ab60e01b815260040160405180910390fd5b60005b815181101561027f5760018060008484815181106101d6576101d66109e9565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055508060010190507fa29fd8e8b328183429f81e3acc10dc14196777efa4ccd23165f71d4dd027ac1b82828151811061024e5761024e6109e9565b602002602001015160405161027291906001600160a01b0391909116815260200190565b60405180910390a16101b6565b5050565b3360009081526020819052604090205460ff166102bc5760405163b54ecb9b60e01b81526004016102b3906109ff565b60405180910390fd5b60005b815181101561027f5760018060008484815181106102df576102df6109e9565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055508060010190507fa29fd8e8b328183429f81e3acc10dc14196777efa4ccd23165f71d4dd027ac1b828281518110610357576103576109e9565b602002602001015160405161037b91906001600160a01b0391909116815260200190565b60405180910390a16102bf565b3360009081526001602052604090205460ff1680156103b957506000356001600160e01b031916637c74376760e11b145b1561044d57336000908152600260205260409020546001600160a01b0316156103f55760405163b1e153ab60e01b815260040160405180910390fd5b6001600160a01b038116600081815260016020908152604091829020805460ff1916905590519182527f29beb8aae77ba82cbb9d5a13ac9153539286534ddea0dc0a0aa61c484585a61491015b60405180910390a150565b3360009081526020819052604090205460ff166103f55760405163b54ecb9b60e01b81526004016102b3906109ff565b3360009081526001602052604090205460ff1680156104ae57506000356001600160e01b031916637c74376760e11b145b1561051357336000908152600260205260409020546001600160a01b0316156104ea5760405163b1e153ab60e01b815260040160405180910390fd5b6001600160a01b03166000908152602081905260409020805460ff81161560ff19909116179055565b3360009081526020819052604090205460ff166104ea5760405163b54ecb9b60e01b81526004016102b3906109ff565b3360009081526001602052604090205460ff16801561057457506000356001600160e01b031916637c74376760e11b145b1561067d57336000908152600260205260409020546001600160a01b0316156105b05760405163b1e153ab60e01b815260040160405180910390fd5b60005b815181101561027f576000600160008484815181106105d4576105d46109e9565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055508060010190507f29beb8aae77ba82cbb9d5a13ac9153539286534ddea0dc0a0aa61c484585a61482828151811061064c5761064c6109e9565b602002602001015160405161067091906001600160a01b0391909116815260200190565b60405180910390a16105b3565b3360009081526020819052604090205460ff166106ad5760405163b54ecb9b60e01b81526004016102b3906109ff565b60005b815181101561027f576000600160008484815181106106d1576106d16109e9565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055508060010190507f29beb8aae77ba82cbb9d5a13ac9153539286534ddea0dc0a0aa61c484585a614828281518110610749576107496109e9565b602002602001015160405161076d91906001600160a01b0391909116815260200190565b60405180910390a16106b0565b3360009081526001602052604090205460ff1680156107ab57506000356001600160e01b031916637c74376760e11b145b156108a057336000908152600260205260409020546001600160a01b0316156107e75760405163b1e153ab60e01b815260040160405180910390fd5b6001600160a01b0381166000908152600160208181526040808420805460ff191690931790925533835282905290205460ff166108475733600090815260026020526040902080546001600160a01b0319166001600160a01b0383161790555b6001600160a01b03811660008181526002602090815260409182902080546001600160a01b0319163317905590519182527fa29fd8e8b328183429f81e3acc10dc14196777efa4ccd23165f71d4dd027ac1b9101610442565b3360009081526020819052604090205460ff166107e75760405163b54ecb9b60e01b81526004016102b3906109ff565b80356001600160a01b03811681146108e757600080fd5b919050565b6000602082840312156108fe57600080fd5b610907826108d0565b9392505050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561093757600080fd5b823567ffffffffffffffff8082111561094f57600080fd5b818501915085601f83011261096357600080fd5b8135818111156109755761097561090e565b8060051b604051601f19603f8301168101818110858211171561099a5761099a61090e565b6040529182528482019250838101850191888311156109b857600080fd5b938501935b828510156109dd576109ce856108d0565b845293850193928501926109bd565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6020808252600a908201526927b7363c9027bbb732b960b11b60408201526060019056fea26469706673582212206f12f6d597e0ce659e0d2ac4cfe136798a7fd563b1726e936051fc652100186964736f6c63430008130033";

type AllowlistConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AllowlistConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Allowlist__factory extends ContractFactory {
  constructor(...args: AllowlistConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<Allowlist> {
    return super.deploy(overrides || {}) as Promise<Allowlist>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Allowlist {
    return super.attach(address) as Allowlist;
  }
  override connect(signer: Signer): Allowlist__factory {
    return super.connect(signer) as Allowlist__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AllowlistInterface {
    return new utils.Interface(_abi) as AllowlistInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Allowlist {
    return new Contract(address, _abi, signerOrProvider) as Allowlist;
  }
}
