/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Allowlist, AllowlistInterface } from "../Allowlist";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AlreadyDeployedAHub",
    type: "error",
  },
  {
    inputs: [],
    name: "AlreadyPlusOne",
    type: "error",
  },
  {
    inputs: [],
    name: "Unallowed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "AddedToAllowList",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "RemovedFromAllowList",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "addrsToAdd_",
        type: "address[]",
      },
    ],
    name: "addBatchToAllowlist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
    ],
    name: "addOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addrToAdd_",
        type: "address",
      },
    ],
    name: "addToAllowlist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "subject",
        type: "address",
      },
    ],
    name: "canAllowList",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isAllowListed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addr",
        type: "address",
      },
    ],
    name: "isAllowed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "subject",
        type: "address",
      },
    ],
    name: "isAllowedOwner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isOwner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "plusOne",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "addrs_",
        type: "address[]",
      },
    ],
    name: "removeBatchFromAllowlist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addrToAdd_",
        type: "address",
      },
    ],
    name: "removeFromAllowlist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50336000908152602081905260409020805460ff19166001179055610c388061003a6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063745d6bff11610071578063745d6bff14610144578063846be7ed14610157578063974b15211461016a578063babcc53914610196578063f31264bb146101c2578063f8e86ece1461020357600080fd5b80632f54bf6e146100ae578063519cecce146100e65780635da93d7e146100fb5780637065cb481461010e57806370dd8d2e14610121575b600080fd5b6100d16100bc366004610ace565b60006020819052908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100f96100f4366004610b06565b610216565b005b6100f9610109366004610ace565b6104ee565b6100f961011c366004610ace565b6105e3565b6100d161012f366004610ace565b60016020526000908152604090205460ff1681565b6100d1610152366004610ace565b6106a9565b6100f9610165366004610b06565b610711565b6100d1610178366004610ace565b6001600160a01b031660009081526020819052604090205460ff1690565b6100d16101a4366004610ace565b6001600160a01b031660009081526001602052604090205460ff1690565b6101eb6101d0366004610ace565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016100dd565b6100f9610211366004610ace565b610948565b6000356001600160e01b031916637c74376760e11b14801561024757503360009081526001602052604090205460ff165b156103a157336000908152600260205260409020546001600160a01b0316156102835760405163b1e153ab60e01b815260040160405180910390fd5b60005b815181101561039d576001908101906000836102a28385610bcb565b815181106102b2576102b2610bec565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16610286576001806000846102ed8386610bcb565b815181106102fd576102fd610bec565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790557fa29fd8e8b328183429f81e3acc10dc14196777efa4ccd23165f71d4dd027ac1b8261035c600184610bcb565b8151811061036c5761036c610bec565b602002602001015160405161039091906001600160a01b0391909116815260200190565b60405180910390a1610286565b5050565b3360009081526020819052604090205460ff166103d15760405163e087598d60e01b815260040160405180910390fd5b60005b815181101561039d576001908101906000836103f08385610bcb565b8151811061040057610400610bec565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff166103d45760018060008461043b8386610bcb565b8151811061044b5761044b610bec565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790557fa29fd8e8b328183429f81e3acc10dc14196777efa4ccd23165f71d4dd027ac1b826104aa600184610bcb565b815181106104ba576104ba610bec565b60200260200101516040516104de91906001600160a01b0391909116815260200190565b60405180910390a16103d4565b50565b6000356001600160e01b031916637c74376760e11b14801561051f57503360009081526001602052604090205460ff165b156105b357336000908152600260205260409020546001600160a01b03161561055b5760405163b1e153ab60e01b815260040160405180910390fd5b6001600160a01b038116600081815260016020908152604091829020805460ff1916905590519182527f29beb8aae77ba82cbb9d5a13ac9153539286534ddea0dc0a0aa61c484585a61491015b60405180910390a150565b3360009081526020819052604090205460ff1661055b5760405163e087598d60e01b815260040160405180910390fd5b6000356001600160e01b031916637c74376760e11b14801561061457503360009081526001602052604090205460ff165b1561067957336000908152600260205260409020546001600160a01b0316156106505760405163b1e153ab60e01b815260040160405180910390fd5b6001600160a01b03166000908152602081905260409020805460ff81161560ff19909116179055565b3360009081526020819052604090205460ff166106505760405163e087598d60e01b815260040160405180910390fd5b6001600160a01b03811660009081526020819052604081205460ff168061070b57506001600160a01b03821660009081526001602052604090205460ff16801561070b57506001600160a01b0382811660009081526002602052604090205416155b92915050565b6000356001600160e01b031916637c74376760e11b14801561074257503360009081526001602052604090205460ff165b1561084b57336000908152600260205260409020546001600160a01b03161561077e5760405163b1e153ab60e01b815260040160405180910390fd5b60005b815181101561039d576000600160008484815181106107a2576107a2610bec565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055508060010190507f29beb8aae77ba82cbb9d5a13ac9153539286534ddea0dc0a0aa61c484585a61482828151811061081a5761081a610bec565b602002602001015160405161083e91906001600160a01b0391909116815260200190565b60405180910390a1610781565b3360009081526020819052604090205460ff1661087b5760405163e087598d60e01b815260040160405180910390fd5b60005b815181101561039d5760006001600084848151811061089f5761089f610bec565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055508060010190507f29beb8aae77ba82cbb9d5a13ac9153539286534ddea0dc0a0aa61c484585a61482828151811061091757610917610bec565b602002602001015160405161093b91906001600160a01b0391909116815260200190565b60405180910390a161087e565b6000356001600160e01b031916637c74376760e11b14801561097957503360009081526001602052604090205460ff165b15610a8257336000908152600260205260409020546001600160a01b0316156109b55760405163b1e153ab60e01b815260040160405180910390fd5b6001600160a01b03811660009081526001602052604090205460ff166104eb576001600160a01b0381166000908152600160208181526040808420805460ff191690931790925533835282905290205460ff16610a49576001600160a01b0381166000818152600260205260408082208054336001600160a01b031991821681179092559083529120805490911690911790555b6040516001600160a01b03821681527fa29fd8e8b328183429f81e3acc10dc14196777efa4ccd23165f71d4dd027ac1b906020016105a8565b3360009081526020819052604090205460ff166109b55760405163e087598d60e01b815260040160405180910390fd5b80356001600160a01b0381168114610ac957600080fd5b919050565b600060208284031215610ae057600080fd5b610ae982610ab2565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215610b1957600080fd5b823567ffffffffffffffff80821115610b3157600080fd5b818501915085601f830112610b4557600080fd5b813581811115610b5757610b57610af0565b8060051b604051601f19603f83011681018181108582111715610b7c57610b7c610af0565b604052918252848201925083810185019188831115610b9a57600080fd5b938501935b82851015610bbf57610bb085610ab2565b84529385019392850192610b9f565b98975050505050505050565b8181038181111561070b57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220bac1f52bf68ae3ba2a44d259837ffc3fffe1d2dcadfde84eb3686e85c08106e064736f6c63430008130033";

type AllowlistConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AllowlistConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Allowlist__factory extends ContractFactory {
  constructor(...args: AllowlistConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<Allowlist> {
    return super.deploy(overrides || {}) as Promise<Allowlist>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Allowlist {
    return super.attach(address) as Allowlist;
  }
  override connect(signer: Signer): Allowlist__factory {
    return super.connect(signer) as Allowlist__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AllowlistInterface {
    return new utils.Interface(_abi) as AllowlistInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Allowlist {
    return new Contract(address, _abi, signerOrProvider) as Allowlist;
  }
}
