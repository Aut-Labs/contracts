/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IPluginRegistry,
  IPluginRegistryInterface,
} from "../IPluginRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newReputationAlgo",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "previousAddress",
        type: "address",
      },
    ],
    name: "DefaultLRAlgoChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "pluginTypeId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "dao",
        type: "address",
      },
    ],
    name: "PluginAddedToDAO",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "pluginTypeId",
        type: "uint256",
      },
    ],
    name: "PluginDefinitionAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "pluginAddress",
        type: "address",
      },
    ],
    name: "PluginRegistered",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "creator",
        type: "address",
      },
      {
        internalType: "string",
        name: "metadataURI",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "canBeStandalone",
        type: "bool",
      },
      {
        internalType: "uint256[]",
        name: "moduleDependencies",
        type: "uint256[]",
      },
    ],
    name: "addPluginDefinition",
    outputs: [
      {
        internalType: "uint256",
        name: "pluginDefinitionId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pluginAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "pluginDefinitionId",
        type: "uint256",
      },
    ],
    name: "addPluginToDAO",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "defaultLRAddr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pluginDefinitionId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "url",
        type: "string",
      },
    ],
    name: "editPluginDefinitionMetadata",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pluginAddress",
        type: "address",
      },
    ],
    name: "getOwnerOfPlugin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address",
      },
    ],
    name: "getPluginIdsByDAO",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getPluginInstanceByTokenId",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "pluginAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "pluginDefinitionId",
            type: "uint256",
          },
        ],
        internalType: "struct IPluginRegistry.PluginInstance",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "modulesRegistry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dao",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "pluginTypeId",
        type: "uint256",
      },
    ],
    name: "pluginDefinitionsInstalledByDAO",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "LR",
        type: "address",
      },
    ],
    name: "setDefaulLRAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pluginAddress_",
        type: "address",
      },
    ],
    name: "tokenIdFromAddress",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IPluginRegistry__factory {
  static readonly abi = _abi;
  static createInterface(): IPluginRegistryInterface {
    return new utils.Interface(_abi) as IPluginRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IPluginRegistry {
    return new Contract(address, _abi, signerOrProvider) as IPluginRegistry;
  }
}
