/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface InteractionModifierInterface extends utils.Interface {
  functions: {
    "changeInUseLocalRep(address)": FunctionFragment;
    "currentReputationAddr()": FunctionFragment;
    "lastReputationAddr()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "changeInUseLocalRep"
      | "currentReputationAddr"
      | "lastReputationAddr"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "changeInUseLocalRep",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "currentReputationAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastReputationAddr",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "changeInUseLocalRep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentReputationAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastReputationAddr",
    data: BytesLike
  ): Result;

  events: {
    "LocalRepALogChangedFor(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LocalRepALogChangedFor"): EventFragment;
}

export interface LocalRepALogChangedForEventObject {
  nova: string;
  repAlgo: string;
}
export type LocalRepALogChangedForEvent = TypedEvent<
  [string, string],
  LocalRepALogChangedForEventObject
>;

export type LocalRepALogChangedForEventFilter =
  TypedEventFilter<LocalRepALogChangedForEvent>;

export interface InteractionModifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InteractionModifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    changeInUseLocalRep(
      NewLocalRepAlgo_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    currentReputationAddr(overrides?: CallOverrides): Promise<[string]>;

    lastReputationAddr(overrides?: CallOverrides): Promise<[string]>;
  };

  changeInUseLocalRep(
    NewLocalRepAlgo_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  currentReputationAddr(overrides?: CallOverrides): Promise<string>;

  lastReputationAddr(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    changeInUseLocalRep(
      NewLocalRepAlgo_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    currentReputationAddr(overrides?: CallOverrides): Promise<string>;

    lastReputationAddr(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "LocalRepALogChangedFor(address,address)"(
      nova?: null,
      repAlgo?: null
    ): LocalRepALogChangedForEventFilter;
    LocalRepALogChangedFor(
      nova?: null,
      repAlgo?: null
    ): LocalRepALogChangedForEventFilter;
  };

  estimateGas: {
    changeInUseLocalRep(
      NewLocalRepAlgo_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    currentReputationAddr(overrides?: CallOverrides): Promise<BigNumber>;

    lastReputationAddr(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    changeInUseLocalRep(
      NewLocalRepAlgo_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    currentReputationAddr(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastReputationAddr(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
