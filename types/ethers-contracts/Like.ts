/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface LikeInterface extends utils.Interface {
  functions: {
    "getTrustedForwarder()": FunctionFragment;
    "isLiked(address)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "like()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getTrustedForwarder"
      | "isLiked"
      | "isTrustedForwarder"
      | "like"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getTrustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isLiked", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "like", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "getTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isLiked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "like", data: BytesLike): Result;

  events: {
    "Liked()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Liked"): EventFragment;
}

export interface LikedEventObject {}
export type LikedEvent = TypedEvent<[], LikedEventObject>;

export type LikedEventFilter = TypedEventFilter<LikedEvent>;

export interface Like extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LikeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getTrustedForwarder(
      overrides?: CallOverrides
    ): Promise<[string] & { forwarder: string }>;

    isLiked(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    like(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

  isLiked(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  like(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  callStatic: {
    getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

    isLiked(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    like(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Liked()"(): LikedEventFilter;
    Liked(): LikedEventFilter;
  };

  estimateGas: {
    getTrustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    isLiked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    like(overrides?: Overrides & { from?: string }): Promise<BigNumber>;
  };

  populateTransaction: {
    getTrustedForwarder(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLiked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    like(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
