/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IPluginRegistry {
  export type PluginInstanceStruct = {
    pluginAddress: string;
    pluginDefinitionId: BigNumberish;
  };

  export type PluginInstanceStructOutput = [string, BigNumber] & {
    pluginAddress: string;
    pluginDefinitionId: BigNumber;
  };
}

export interface PluginRegistryInterface extends utils.Interface {
  functions: {
    "_numPluginDefinitions()": FunctionFragment;
    "_numPluginsMinted()": FunctionFragment;
    "addPluginDefinition(address,string,uint256,bool,uint256[])": FunctionFragment;
    "addPluginToDAO(address,uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "defaultLRAddr()": FunctionFragment;
    "editPluginDefinitionMetadata(uint256,string)": FunctionFragment;
    "feeBase1000()": FunctionFragment;
    "feeReciever()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getDependencyModulesForPlugin(uint256)": FunctionFragment;
    "getOwnerOfPlugin(address)": FunctionFragment;
    "getPluginIdsByDAO(address)": FunctionFragment;
    "getPluginInstanceByTokenId(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "modulesRegistry()": FunctionFragment;
    "name()": FunctionFragment;
    "oracleAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "pluginDefinitionsById(uint256)": FunctionFragment;
    "pluginDefinitionsInstalledByDAO(address,uint256)": FunctionFragment;
    "pluginInstanceByTokenId(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setActive(uint256,bool)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setDefaulLRAddress(address)": FunctionFragment;
    "setFeeBase1000(uint256)": FunctionFragment;
    "setFeeReciever(address)": FunctionFragment;
    "setOracleAddress(address)": FunctionFragment;
    "setPrice(uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenIdByPluginAddress(address)": FunctionFragment;
    "tokenIdFromAddress(address)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_numPluginDefinitions"
      | "_numPluginsMinted"
      | "addPluginDefinition"
      | "addPluginToDAO"
      | "approve"
      | "balanceOf"
      | "defaultLRAddr"
      | "editPluginDefinitionMetadata"
      | "feeBase1000"
      | "feeReciever"
      | "getApproved"
      | "getDependencyModulesForPlugin"
      | "getOwnerOfPlugin"
      | "getPluginIdsByDAO"
      | "getPluginInstanceByTokenId"
      | "isApprovedForAll"
      | "modulesRegistry"
      | "name"
      | "oracleAddress"
      | "owner"
      | "ownerOf"
      | "pluginDefinitionsById"
      | "pluginDefinitionsInstalledByDAO"
      | "pluginInstanceByTokenId"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setActive"
      | "setApprovalForAll"
      | "setDefaulLRAddress"
      | "setFeeBase1000"
      | "setFeeReciever"
      | "setOracleAddress"
      | "setPrice"
      | "supportsInterface"
      | "symbol"
      | "tokenIdByPluginAddress"
      | "tokenIdFromAddress"
      | "tokenURI"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_numPluginDefinitions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_numPluginsMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPluginDefinition",
    values: [string, string, BigNumberish, boolean, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addPluginToDAO",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "defaultLRAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "editPluginDefinitionMetadata",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "feeBase1000",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeReciever",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDependencyModulesForPlugin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerOfPlugin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPluginIdsByDAO",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPluginInstanceByTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "modulesRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oracleAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pluginDefinitionsById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pluginDefinitionsInstalledByDAO",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pluginInstanceByTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setActive",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaulLRAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeBase1000",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeReciever",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenIdByPluginAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdFromAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "_numPluginDefinitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_numPluginsMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPluginDefinition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPluginToDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultLRAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editPluginDefinitionMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeBase1000",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeReciever",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDependencyModulesForPlugin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerOfPlugin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPluginIdsByDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPluginInstanceByTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modulesRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pluginDefinitionsById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pluginDefinitionsInstalledByDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pluginInstanceByTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaulLRAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeBase1000",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeReciever",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdByPluginAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdFromAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "DefaultLRAlgoChanged(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PluginAddedToDAO(uint256,uint256,address)": EventFragment;
    "PluginDefinitionAdded(uint256)": EventFragment;
    "PluginRegistered(uint256,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DefaultLRAlgoChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PluginAddedToDAO"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PluginDefinitionAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PluginRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface DefaultLRAlgoChangedEventObject {
  newReputationAlgo: string;
  previousAddress: string;
}
export type DefaultLRAlgoChangedEvent = TypedEvent<
  [string, string],
  DefaultLRAlgoChangedEventObject
>;

export type DefaultLRAlgoChangedEventFilter =
  TypedEventFilter<DefaultLRAlgoChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PluginAddedToDAOEventObject {
  tokenId: BigNumber;
  pluginTypeId: BigNumber;
  dao: string;
}
export type PluginAddedToDAOEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  PluginAddedToDAOEventObject
>;

export type PluginAddedToDAOEventFilter =
  TypedEventFilter<PluginAddedToDAOEvent>;

export interface PluginDefinitionAddedEventObject {
  pluginTypeId: BigNumber;
}
export type PluginDefinitionAddedEvent = TypedEvent<
  [BigNumber],
  PluginDefinitionAddedEventObject
>;

export type PluginDefinitionAddedEventFilter =
  TypedEventFilter<PluginDefinitionAddedEvent>;

export interface PluginRegisteredEventObject {
  tokenId: BigNumber;
  pluginAddress: string;
}
export type PluginRegisteredEvent = TypedEvent<
  [BigNumber, string],
  PluginRegisteredEventObject
>;

export type PluginRegisteredEventFilter =
  TypedEventFilter<PluginRegisteredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface PluginRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PluginRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _numPluginDefinitions(overrides?: CallOverrides): Promise<[BigNumber]>;

    _numPluginsMinted(overrides?: CallOverrides): Promise<[BigNumber]>;

    addPluginDefinition(
      creator: string,
      metadataURI: string,
      price: BigNumberish,
      canBeStandalone: boolean,
      moduleDependencies: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addPluginToDAO(
      pluginAddress: string,
      pluginDefinitionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    defaultLRAddr(overrides?: CallOverrides): Promise<[string]>;

    editPluginDefinitionMetadata(
      pluginDefinitionId: BigNumberish,
      url: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    feeBase1000(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeReciever(overrides?: CallOverrides): Promise<[string]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDependencyModulesForPlugin(
      pluginDefinitionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getOwnerOfPlugin(
      pluginAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPluginIdsByDAO(
      dao: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getPluginInstanceByTokenId(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IPluginRegistry.PluginInstanceStructOutput]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    modulesRegistry(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    oracleAddress(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pluginDefinitionsById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, boolean, boolean] & {
        metadataURI: string;
        price: BigNumber;
        creator: string;
        active: boolean;
        canBeStandalone: boolean;
      }
    >;

    pluginDefinitionsInstalledByDAO(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pluginInstanceByTokenId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        pluginAddress: string;
        pluginDefinitionId: BigNumber;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setActive(
      pluginDefinitionId: BigNumberish,
      newActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDefaulLRAddress(
      LR: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeeBase1000(
      newFeeBase1000: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeeReciever(
      newFeeReciever: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setOracleAddress(
      newOracleAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPrice(
      pluginDefinitionId: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenIdByPluginAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenIdFromAddress(
      pluginAddress_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  _numPluginDefinitions(overrides?: CallOverrides): Promise<BigNumber>;

  _numPluginsMinted(overrides?: CallOverrides): Promise<BigNumber>;

  addPluginDefinition(
    creator: string,
    metadataURI: string,
    price: BigNumberish,
    canBeStandalone: boolean,
    moduleDependencies: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addPluginToDAO(
    pluginAddress: string,
    pluginDefinitionId: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  defaultLRAddr(overrides?: CallOverrides): Promise<string>;

  editPluginDefinitionMetadata(
    pluginDefinitionId: BigNumberish,
    url: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  feeBase1000(overrides?: CallOverrides): Promise<BigNumber>;

  feeReciever(overrides?: CallOverrides): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getDependencyModulesForPlugin(
    pluginDefinitionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getOwnerOfPlugin(
    pluginAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getPluginIdsByDAO(
    dao: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPluginInstanceByTokenId(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IPluginRegistry.PluginInstanceStructOutput>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  modulesRegistry(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  oracleAddress(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  pluginDefinitionsById(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, boolean, boolean] & {
      metadataURI: string;
      price: BigNumber;
      creator: string;
      active: boolean;
      canBeStandalone: boolean;
    }
  >;

  pluginDefinitionsInstalledByDAO(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pluginInstanceByTokenId(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & {
      pluginAddress: string;
      pluginDefinitionId: BigNumber;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setActive(
    pluginDefinitionId: BigNumberish,
    newActive: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDefaulLRAddress(
    LR: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeeBase1000(
    newFeeBase1000: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeeReciever(
    newFeeReciever: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setOracleAddress(
    newOracleAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPrice(
    pluginDefinitionId: BigNumberish,
    newPrice: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenIdByPluginAddress(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenIdFromAddress(
    pluginAddress_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    _numPluginDefinitions(overrides?: CallOverrides): Promise<BigNumber>;

    _numPluginsMinted(overrides?: CallOverrides): Promise<BigNumber>;

    addPluginDefinition(
      creator: string,
      metadataURI: string,
      price: BigNumberish,
      canBeStandalone: boolean,
      moduleDependencies: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addPluginToDAO(
      pluginAddress: string,
      pluginDefinitionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    defaultLRAddr(overrides?: CallOverrides): Promise<string>;

    editPluginDefinitionMetadata(
      pluginDefinitionId: BigNumberish,
      url: string,
      overrides?: CallOverrides
    ): Promise<void>;

    feeBase1000(overrides?: CallOverrides): Promise<BigNumber>;

    feeReciever(overrides?: CallOverrides): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getDependencyModulesForPlugin(
      pluginDefinitionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getOwnerOfPlugin(
      pluginAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getPluginIdsByDAO(
      dao: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPluginInstanceByTokenId(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IPluginRegistry.PluginInstanceStructOutput>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    modulesRegistry(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    oracleAddress(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    pluginDefinitionsById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, boolean, boolean] & {
        metadataURI: string;
        price: BigNumber;
        creator: string;
        active: boolean;
        canBeStandalone: boolean;
      }
    >;

    pluginDefinitionsInstalledByDAO(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pluginInstanceByTokenId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        pluginAddress: string;
        pluginDefinitionId: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setActive(
      pluginDefinitionId: BigNumberish,
      newActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaulLRAddress(LR: string, overrides?: CallOverrides): Promise<void>;

    setFeeBase1000(
      newFeeBase1000: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeReciever(
      newFeeReciever: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleAddress(
      newOracleAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrice(
      pluginDefinitionId: BigNumberish,
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenIdByPluginAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdFromAddress(
      pluginAddress_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "DefaultLRAlgoChanged(address,address)"(
      newReputationAlgo?: null,
      previousAddress?: null
    ): DefaultLRAlgoChangedEventFilter;
    DefaultLRAlgoChanged(
      newReputationAlgo?: null,
      previousAddress?: null
    ): DefaultLRAlgoChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PluginAddedToDAO(uint256,uint256,address)"(
      tokenId?: BigNumberish | null,
      pluginTypeId?: BigNumberish | null,
      dao?: string | null
    ): PluginAddedToDAOEventFilter;
    PluginAddedToDAO(
      tokenId?: BigNumberish | null,
      pluginTypeId?: BigNumberish | null,
      dao?: string | null
    ): PluginAddedToDAOEventFilter;

    "PluginDefinitionAdded(uint256)"(
      pluginTypeId?: BigNumberish | null
    ): PluginDefinitionAddedEventFilter;
    PluginDefinitionAdded(
      pluginTypeId?: BigNumberish | null
    ): PluginDefinitionAddedEventFilter;

    "PluginRegistered(uint256,address)"(
      tokenId?: BigNumberish | null,
      pluginAddress?: string | null
    ): PluginRegisteredEventFilter;
    PluginRegistered(
      tokenId?: BigNumberish | null,
      pluginAddress?: string | null
    ): PluginRegisteredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    _numPluginDefinitions(overrides?: CallOverrides): Promise<BigNumber>;

    _numPluginsMinted(overrides?: CallOverrides): Promise<BigNumber>;

    addPluginDefinition(
      creator: string,
      metadataURI: string,
      price: BigNumberish,
      canBeStandalone: boolean,
      moduleDependencies: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addPluginToDAO(
      pluginAddress: string,
      pluginDefinitionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    defaultLRAddr(overrides?: CallOverrides): Promise<BigNumber>;

    editPluginDefinitionMetadata(
      pluginDefinitionId: BigNumberish,
      url: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    feeBase1000(overrides?: CallOverrides): Promise<BigNumber>;

    feeReciever(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDependencyModulesForPlugin(
      pluginDefinitionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnerOfPlugin(
      pluginAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPluginIdsByDAO(
      dao: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPluginInstanceByTokenId(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modulesRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    oracleAddress(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pluginDefinitionsById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pluginDefinitionsInstalledByDAO(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pluginInstanceByTokenId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setActive(
      pluginDefinitionId: BigNumberish,
      newActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDefaulLRAddress(
      LR: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeeBase1000(
      newFeeBase1000: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeeReciever(
      newFeeReciever: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setOracleAddress(
      newOracleAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPrice(
      pluginDefinitionId: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIdByPluginAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdFromAddress(
      pluginAddress_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _numPluginDefinitions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _numPluginsMinted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPluginDefinition(
      creator: string,
      metadataURI: string,
      price: BigNumberish,
      canBeStandalone: boolean,
      moduleDependencies: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addPluginToDAO(
      pluginAddress: string,
      pluginDefinitionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultLRAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    editPluginDefinitionMetadata(
      pluginDefinitionId: BigNumberish,
      url: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    feeBase1000(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeReciever(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDependencyModulesForPlugin(
      pluginDefinitionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnerOfPlugin(
      pluginAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPluginIdsByDAO(
      dao: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPluginInstanceByTokenId(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modulesRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pluginDefinitionsById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pluginDefinitionsInstalledByDAO(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pluginInstanceByTokenId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setActive(
      pluginDefinitionId: BigNumberish,
      newActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDefaulLRAddress(
      LR: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeeBase1000(
      newFeeBase1000: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeeReciever(
      newFeeReciever: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setOracleAddress(
      newOracleAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPrice(
      pluginDefinitionId: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenIdByPluginAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIdFromAddress(
      pluginAddress_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
