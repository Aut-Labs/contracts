/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace QuestsModule {
  export type QuestModelStruct = {
    role: BigNumberish;
    active: boolean;
    metadataUri: string;
    durationInHours: BigNumberish;
    startDate: BigNumberish;
    tasksCount: BigNumberish;
  };

  export type QuestModelStructOutput = [
    BigNumber,
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    role: BigNumber;
    active: boolean;
    metadataUri: string;
    durationInHours: BigNumber;
    startDate: BigNumber;
    tasksCount: BigNumber;
  };

  export type PluginTasksStruct = {
    pluginId: BigNumberish;
    taskId: BigNumberish;
  };

  export type PluginTasksStructOutput = [BigNumber, BigNumber] & {
    pluginId: BigNumber;
    taskId: BigNumber;
  };
}

export interface QuestsModuleInterface extends utils.Interface {
  functions: {
    "create(uint256,string,uint256,uint256)": FunctionFragment;
    "createTask(uint256,uint256,string)": FunctionFragment;
    "editQuest(uint256,uint256,string,uint256)": FunctionFragment;
    "getById(uint256)": FunctionFragment;
    "getTimeOfCompletion(address,uint256)": FunctionFragment;
    "getTotalQuests()": FunctionFragment;
    "hasCompletedAQuest(address,uint256)": FunctionFragment;
    "hasCompletedQuestForRole(address,uint256)": FunctionFragment;
    "isActive()": FunctionFragment;
    "isOngoing(uint256)": FunctionFragment;
    "isPending(uint256)": FunctionFragment;
    "moduleId()": FunctionFragment;
    "hubAddress()": FunctionFragment;
    "removeTasks(uint256,(uint256,uint256)[])": FunctionFragment;
    "setActiveQuestPerRole(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "create"
      | "createTask"
      | "editQuest"
      | "getById"
      | "getTimeOfCompletion"
      | "getTotalQuests"
      | "hasCompletedAQuest"
      | "hasCompletedQuestForRole"
      | "isActive"
      | "isOngoing"
      | "isPending"
      | "moduleId"
      | "hubAddress"
      | "removeTasks"
      | "setActiveQuestPerRole"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "create",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createTask",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "editQuest",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeOfCompletion",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalQuests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasCompletedAQuest",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasCompletedQuestForRole",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isOngoing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPending",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "moduleId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hubAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeTasks",
    values: [BigNumberish, QuestsModule.PluginTasksStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setActiveQuestPerRole",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "editQuest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getById", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTimeOfCompletion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalQuests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasCompletedAQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasCompletedQuestForRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOngoing", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPending", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "moduleId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hubAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTasks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setActiveQuestPerRole",
    data: BytesLike
  ): Result;

  events: {
    "Applied(uint256,address)": EventFragment;
    "QuestCompleted(uint256,address)": EventFragment;
    "QuestCreated(uint256)": EventFragment;
    "QuestEdited()": EventFragment;
    "TasksAddedToQuest(uint256,uint256)": EventFragment;
    "TasksRemovedFromQuest()": EventFragment;
    "Withdrawn(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Applied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuestCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuestCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuestEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TasksAddedToQuest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TasksRemovedFromQuest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface AppliedEventObject {
  questId: BigNumber;
  user: string;
}
export type AppliedEvent = TypedEvent<[BigNumber, string], AppliedEventObject>;

export type AppliedEventFilter = TypedEventFilter<AppliedEvent>;

export interface QuestCompletedEventObject {
  questId: BigNumber;
  user: string;
}
export type QuestCompletedEvent = TypedEvent<
  [BigNumber, string],
  QuestCompletedEventObject
>;

export type QuestCompletedEventFilter = TypedEventFilter<QuestCompletedEvent>;

export interface QuestCreatedEventObject {
  questId: BigNumber;
}
export type QuestCreatedEvent = TypedEvent<
  [BigNumber],
  QuestCreatedEventObject
>;

export type QuestCreatedEventFilter = TypedEventFilter<QuestCreatedEvent>;

export interface QuestEditedEventObject {}
export type QuestEditedEvent = TypedEvent<[], QuestEditedEventObject>;

export type QuestEditedEventFilter = TypedEventFilter<QuestEditedEvent>;

export interface TasksAddedToQuestEventObject {
  questId: BigNumber;
  taskId: BigNumber;
}
export type TasksAddedToQuestEvent = TypedEvent<
  [BigNumber, BigNumber],
  TasksAddedToQuestEventObject
>;

export type TasksAddedToQuestEventFilter =
  TypedEventFilter<TasksAddedToQuestEvent>;

export interface TasksRemovedFromQuestEventObject {}
export type TasksRemovedFromQuestEvent = TypedEvent<
  [],
  TasksRemovedFromQuestEventObject
>;

export type TasksRemovedFromQuestEventFilter =
  TypedEventFilter<TasksRemovedFromQuestEvent>;

export interface WithdrawnEventObject {
  questId: BigNumber;
  user: string;
}
export type WithdrawnEvent = TypedEvent<
  [BigNumber, string],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface QuestsModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QuestsModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    create(
      role: BigNumberish,
      uri: string,
      startDate: BigNumberish,
      durationInHours: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createTask(
      questId: BigNumberish,
      tasksPluginId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    editQuest(
      questId: BigNumberish,
      role: BigNumberish,
      uri: string,
      durationInHours: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getById(
      questId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[QuestsModule.QuestModelStructOutput]>;

    getTimeOfCompletion(
      user: string,
      questId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalQuests(overrides?: CallOverrides): Promise<[BigNumber]>;

    hasCompletedAQuest(
      user: string,
      questId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasCompletedQuestForRole(
      user: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isActive(overrides?: CallOverrides): Promise<[boolean]>;

    isOngoing(
      questId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPending(
      questId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    moduleId(overrides?: CallOverrides): Promise<[BigNumber]>;

    hubAddress(overrides?: CallOverrides): Promise<[string]>;

    removeTasks(
      questId: BigNumberish,
      tasksToRemove: QuestsModule.PluginTasksStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setActiveQuestPerRole(
      role: BigNumberish,
      questId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  create(
    role: BigNumberish,
    uri: string,
    startDate: BigNumberish,
    durationInHours: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createTask(
    questId: BigNumberish,
    tasksPluginId: BigNumberish,
    uri: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  editQuest(
    questId: BigNumberish,
    role: BigNumberish,
    uri: string,
    durationInHours: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getById(
    questId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<QuestsModule.QuestModelStructOutput>;

  getTimeOfCompletion(
    user: string,
    questId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalQuests(overrides?: CallOverrides): Promise<BigNumber>;

  hasCompletedAQuest(
    user: string,
    questId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasCompletedQuestForRole(
    user: string,
    role: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isActive(overrides?: CallOverrides): Promise<boolean>;

  isOngoing(questId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  isPending(questId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  moduleId(overrides?: CallOverrides): Promise<BigNumber>;

  hubAddress(overrides?: CallOverrides): Promise<string>;

  removeTasks(
    questId: BigNumberish,
    tasksToRemove: QuestsModule.PluginTasksStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setActiveQuestPerRole(
    role: BigNumberish,
    questId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    create(
      role: BigNumberish,
      uri: string,
      startDate: BigNumberish,
      durationInHours: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createTask(
      questId: BigNumberish,
      tasksPluginId: BigNumberish,
      uri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    editQuest(
      questId: BigNumberish,
      role: BigNumberish,
      uri: string,
      durationInHours: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getById(
      questId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<QuestsModule.QuestModelStructOutput>;

    getTimeOfCompletion(
      user: string,
      questId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalQuests(overrides?: CallOverrides): Promise<BigNumber>;

    hasCompletedAQuest(
      user: string,
      questId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasCompletedQuestForRole(
      user: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isActive(overrides?: CallOverrides): Promise<boolean>;

    isOngoing(
      questId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPending(
      questId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    moduleId(overrides?: CallOverrides): Promise<BigNumber>;

    hubAddress(overrides?: CallOverrides): Promise<string>;

    removeTasks(
      questId: BigNumberish,
      tasksToRemove: QuestsModule.PluginTasksStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setActiveQuestPerRole(
      role: BigNumberish,
      questId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Applied(uint256,address)"(questId?: null, user?: null): AppliedEventFilter;
    Applied(questId?: null, user?: null): AppliedEventFilter;

    "QuestCompleted(uint256,address)"(
      questId?: null,
      user?: null
    ): QuestCompletedEventFilter;
    QuestCompleted(questId?: null, user?: null): QuestCompletedEventFilter;

    "QuestCreated(uint256)"(questId?: null): QuestCreatedEventFilter;
    QuestCreated(questId?: null): QuestCreatedEventFilter;

    "QuestEdited()"(): QuestEditedEventFilter;
    QuestEdited(): QuestEditedEventFilter;

    "TasksAddedToQuest(uint256,uint256)"(
      questId?: null,
      taskId?: null
    ): TasksAddedToQuestEventFilter;
    TasksAddedToQuest(
      questId?: null,
      taskId?: null
    ): TasksAddedToQuestEventFilter;

    "TasksRemovedFromQuest()"(): TasksRemovedFromQuestEventFilter;
    TasksRemovedFromQuest(): TasksRemovedFromQuestEventFilter;

    "Withdrawn(uint256,address)"(
      questId?: null,
      user?: null
    ): WithdrawnEventFilter;
    Withdrawn(questId?: null, user?: null): WithdrawnEventFilter;
  };

  estimateGas: {
    create(
      role: BigNumberish,
      uri: string,
      startDate: BigNumberish,
      durationInHours: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createTask(
      questId: BigNumberish,
      tasksPluginId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    editQuest(
      questId: BigNumberish,
      role: BigNumberish,
      uri: string,
      durationInHours: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getById(
      questId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimeOfCompletion(
      user: string,
      questId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalQuests(overrides?: CallOverrides): Promise<BigNumber>;

    hasCompletedAQuest(
      user: string,
      questId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasCompletedQuestForRole(
      user: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<BigNumber>;

    isOngoing(
      questId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPending(
      questId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moduleId(overrides?: CallOverrides): Promise<BigNumber>;

    hubAddress(overrides?: CallOverrides): Promise<BigNumber>;

    removeTasks(
      questId: BigNumberish,
      tasksToRemove: QuestsModule.PluginTasksStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setActiveQuestPerRole(
      role: BigNumberish,
      questId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    create(
      role: BigNumberish,
      uri: string,
      startDate: BigNumberish,
      durationInHours: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createTask(
      questId: BigNumberish,
      tasksPluginId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    editQuest(
      questId: BigNumberish,
      role: BigNumberish,
      uri: string,
      durationInHours: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getById(
      questId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimeOfCompletion(
      user: string,
      questId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalQuests(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasCompletedAQuest(
      user: string,
      questId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasCompletedQuestForRole(
      user: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOngoing(
      questId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPending(
      questId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    moduleId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hubAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeTasks(
      questId: BigNumberish,
      tasksToRemove: QuestsModule.PluginTasksStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setActiveQuestPerRole(
      role: BigNumberish,
      questId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
