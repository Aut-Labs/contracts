/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IAllowlistInterface extends utils.Interface {
  functions: {
    "addBatchToAllowlist(address[])": FunctionFragment;
    "addOwner(address)": FunctionFragment;
    "addToAllowlist(address)": FunctionFragment;
    "canAllowList(address)": FunctionFragment;
    "isAllowListed(address)": FunctionFragment;
    "isAllowed(address)": FunctionFragment;
    "isAllowedOwner(address)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "plusOne(address)": FunctionFragment;
    "removeBatchFromAllowlist(address[])": FunctionFragment;
    "removeFromAllowlist(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addBatchToAllowlist"
      | "addOwner"
      | "addToAllowlist"
      | "canAllowList"
      | "isAllowListed"
      | "isAllowed"
      | "isAllowedOwner"
      | "isOwner"
      | "plusOne"
      | "removeBatchFromAllowlist"
      | "removeFromAllowlist"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addBatchToAllowlist",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "addOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addToAllowlist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "canAllowList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowListed",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isAllowed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isAllowedOwner",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "plusOne", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeBatchFromAllowlist",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromAllowlist",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addBatchToAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addToAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAllowed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "plusOne", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeBatchFromAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromAllowlist",
    data: BytesLike
  ): Result;

  events: {
    "AddedToAllowList(address)": EventFragment;
    "RemovedFromAllowList(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedToAllowList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedFromAllowList"): EventFragment;
}

export interface AddedToAllowListEventObject {
  who: string;
}
export type AddedToAllowListEvent = TypedEvent<
  [string],
  AddedToAllowListEventObject
>;

export type AddedToAllowListEventFilter =
  TypedEventFilter<AddedToAllowListEvent>;

export interface RemovedFromAllowListEventObject {
  who: string;
}
export type RemovedFromAllowListEvent = TypedEvent<
  [string],
  RemovedFromAllowListEventObject
>;

export type RemovedFromAllowListEventFilter =
  TypedEventFilter<RemovedFromAllowListEvent>;

export interface IAllowlist extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAllowlistInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addBatchToAllowlist(
      addrsToAdd_: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addOwner(
      owner_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addToAllowlist(
      addrToAdd_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    canAllowList(
      subject: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAllowListed(
      subject: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAllowed(_addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isAllowedOwner(
      subject: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwner(subject: string, overrides?: CallOverrides): Promise<[boolean]>;

    plusOne(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    removeBatchFromAllowlist(
      _addrs: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeFromAllowlist(
      addrToAdd_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addBatchToAllowlist(
    addrsToAdd_: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addOwner(
    owner_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addToAllowlist(
    addrToAdd_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  canAllowList(subject: string, overrides?: CallOverrides): Promise<boolean>;

  isAllowListed(subject: string, overrides?: CallOverrides): Promise<boolean>;

  isAllowed(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  isAllowedOwner(subject: string, overrides?: CallOverrides): Promise<boolean>;

  isOwner(subject: string, overrides?: CallOverrides): Promise<boolean>;

  plusOne(arg0: string, overrides?: CallOverrides): Promise<string>;

  removeBatchFromAllowlist(
    _addrs: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeFromAllowlist(
    addrToAdd_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addBatchToAllowlist(
      addrsToAdd_: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    addOwner(owner_: string, overrides?: CallOverrides): Promise<void>;

    addToAllowlist(
      addrToAdd_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    canAllowList(subject: string, overrides?: CallOverrides): Promise<boolean>;

    isAllowListed(subject: string, overrides?: CallOverrides): Promise<boolean>;

    isAllowed(_addr: string, overrides?: CallOverrides): Promise<boolean>;

    isAllowedOwner(
      subject: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwner(subject: string, overrides?: CallOverrides): Promise<boolean>;

    plusOne(arg0: string, overrides?: CallOverrides): Promise<string>;

    removeBatchFromAllowlist(
      _addrs: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeFromAllowlist(
      addrToAdd_: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddedToAllowList(address)"(who?: null): AddedToAllowListEventFilter;
    AddedToAllowList(who?: null): AddedToAllowListEventFilter;

    "RemovedFromAllowList(address)"(
      who?: null
    ): RemovedFromAllowListEventFilter;
    RemovedFromAllowList(who?: null): RemovedFromAllowListEventFilter;
  };

  estimateGas: {
    addBatchToAllowlist(
      addrsToAdd_: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addOwner(
      owner_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addToAllowlist(
      addrToAdd_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    canAllowList(
      subject: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAllowListed(
      subject: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAllowed(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isAllowedOwner(
      subject: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(subject: string, overrides?: CallOverrides): Promise<BigNumber>;

    plusOne(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeBatchFromAllowlist(
      _addrs: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeFromAllowlist(
      addrToAdd_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addBatchToAllowlist(
      addrsToAdd_: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addOwner(
      owner_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addToAllowlist(
      addrToAdd_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    canAllowList(
      subject: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAllowListed(
      subject: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAllowed(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAllowedOwner(
      subject: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      subject: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    plusOne(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeBatchFromAllowlist(
      _addrs: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeFromAllowlist(
      addrToAdd_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
