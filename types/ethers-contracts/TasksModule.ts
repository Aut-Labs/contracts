/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace TasksModule {
  export type TaskStruct = {
    createdOn: BigNumberish;
    creator: string;
    role: BigNumberish;
    metadata: string;
    startDate: BigNumberish;
    endDate: BigNumberish;
  };

  export type TaskStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    createdOn: BigNumber;
    creator: string;
    role: BigNumber;
    metadata: string;
    startDate: BigNumber;
    endDate: BigNumber;
  };
}

export interface TasksModuleInterface extends utils.Interface {
  functions: {
    "create(uint256,string,uint256,uint256)": FunctionFragment;
    "createBy(address,uint256,string,uint256,uint256)": FunctionFragment;
    "editTask(uint256,uint256,string,uint256,uint256)": FunctionFragment;
    "finalize(uint256)": FunctionFragment;
    "finalizeFor(uint256,address)": FunctionFragment;
    "getById(uint256)": FunctionFragment;
    "getCompletionTime(uint256,address)": FunctionFragment;
    "getStatusPerSubmitter(uint256,address)": FunctionFragment;
    "hasCompletedTheTask(address,uint256)": FunctionFragment;
    "isActive()": FunctionFragment;
    "moduleId()": FunctionFragment;
    "novaAddress()": FunctionFragment;
    "submit(uint256,string)": FunctionFragment;
    "take(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "create"
      | "createBy"
      | "editTask"
      | "finalize"
      | "finalizeFor"
      | "getById"
      | "getCompletionTime"
      | "getStatusPerSubmitter"
      | "hasCompletedTheTask"
      | "isActive"
      | "moduleId"
      | "novaAddress"
      | "submit"
      | "take"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "create",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createBy",
    values: [string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "editTask",
    values: [BigNumberish, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeFor",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompletionTime",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStatusPerSubmitter",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasCompletedTheTask",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(functionFragment: "moduleId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "novaAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submit",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "take", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createBy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "editTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getById", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCompletionTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStatusPerSubmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasCompletedTheTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "moduleId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "novaAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "take", data: BytesLike): Result;

  events: {
    "TaskCreated(uint256,string)": EventFragment;
    "TaskEdited(uint256,string)": EventFragment;
    "TaskFinalized(uint256,address)": EventFragment;
    "TaskSubmitted(uint256,uint256)": EventFragment;
    "TaskTaken(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TaskCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskTaken"): EventFragment;
}

export interface TaskCreatedEventObject {
  taskID: BigNumber;
  uri: string;
}
export type TaskCreatedEvent = TypedEvent<
  [BigNumber, string],
  TaskCreatedEventObject
>;

export type TaskCreatedEventFilter = TypedEventFilter<TaskCreatedEvent>;

export interface TaskEditedEventObject {
  taskID: BigNumber;
  uri: string;
}
export type TaskEditedEvent = TypedEvent<
  [BigNumber, string],
  TaskEditedEventObject
>;

export type TaskEditedEventFilter = TypedEventFilter<TaskEditedEvent>;

export interface TaskFinalizedEventObject {
  taskID: BigNumber;
  taker: string;
}
export type TaskFinalizedEvent = TypedEvent<
  [BigNumber, string],
  TaskFinalizedEventObject
>;

export type TaskFinalizedEventFilter = TypedEventFilter<TaskFinalizedEvent>;

export interface TaskSubmittedEventObject {
  taskID: BigNumber;
  submissionId: BigNumber;
}
export type TaskSubmittedEvent = TypedEvent<
  [BigNumber, BigNumber],
  TaskSubmittedEventObject
>;

export type TaskSubmittedEventFilter = TypedEventFilter<TaskSubmittedEvent>;

export interface TaskTakenEventObject {
  taskID: BigNumber;
  taker: string;
}
export type TaskTakenEvent = TypedEvent<
  [BigNumber, string],
  TaskTakenEventObject
>;

export type TaskTakenEventFilter = TypedEventFilter<TaskTakenEvent>;

export interface TasksModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TasksModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    create(
      role: BigNumberish,
      uri: string,
      startDate: BigNumberish,
      endDate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createBy(
      creator: string,
      role: BigNumberish,
      uri: string,
      startDate: BigNumberish,
      endDate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    editTask(
      taskId: BigNumberish,
      role: BigNumberish,
      uri: string,
      startDate: BigNumberish,
      endDate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    finalize(
      taskID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    finalizeFor(
      taskID: BigNumberish,
      submitter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getById(
      taskID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[TasksModule.TaskStructOutput]>;

    getCompletionTime(
      taskId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStatusPerSubmitter(
      taskId: BigNumberish,
      submitter: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    hasCompletedTheTask(
      user: string,
      taskID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isActive(overrides?: CallOverrides): Promise<[boolean]>;

    moduleId(overrides?: CallOverrides): Promise<[BigNumber]>;

    novaAddress(overrides?: CallOverrides): Promise<[string]>;

    submit(
      taskID: BigNumberish,
      submitionUrl: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    take(
      taskID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  create(
    role: BigNumberish,
    uri: string,
    startDate: BigNumberish,
    endDate: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createBy(
    creator: string,
    role: BigNumberish,
    uri: string,
    startDate: BigNumberish,
    endDate: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  editTask(
    taskId: BigNumberish,
    role: BigNumberish,
    uri: string,
    startDate: BigNumberish,
    endDate: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  finalize(
    taskID: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  finalizeFor(
    taskID: BigNumberish,
    submitter: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getById(
    taskID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<TasksModule.TaskStructOutput>;

  getCompletionTime(
    taskId: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStatusPerSubmitter(
    taskId: BigNumberish,
    submitter: string,
    overrides?: CallOverrides
  ): Promise<number>;

  hasCompletedTheTask(
    user: string,
    taskID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isActive(overrides?: CallOverrides): Promise<boolean>;

  moduleId(overrides?: CallOverrides): Promise<BigNumber>;

  novaAddress(overrides?: CallOverrides): Promise<string>;

  submit(
    taskID: BigNumberish,
    submitionUrl: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  take(
    taskID: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    create(
      role: BigNumberish,
      uri: string,
      startDate: BigNumberish,
      endDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createBy(
      creator: string,
      role: BigNumberish,
      uri: string,
      startDate: BigNumberish,
      endDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    editTask(
      taskId: BigNumberish,
      role: BigNumberish,
      uri: string,
      startDate: BigNumberish,
      endDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    finalize(taskID: BigNumberish, overrides?: CallOverrides): Promise<void>;

    finalizeFor(
      taskID: BigNumberish,
      submitter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getById(
      taskID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<TasksModule.TaskStructOutput>;

    getCompletionTime(
      taskId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStatusPerSubmitter(
      taskId: BigNumberish,
      submitter: string,
      overrides?: CallOverrides
    ): Promise<number>;

    hasCompletedTheTask(
      user: string,
      taskID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isActive(overrides?: CallOverrides): Promise<boolean>;

    moduleId(overrides?: CallOverrides): Promise<BigNumber>;

    novaAddress(overrides?: CallOverrides): Promise<string>;

    submit(
      taskID: BigNumberish,
      submitionUrl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    take(taskID: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "TaskCreated(uint256,string)"(
      taskID?: null,
      uri?: null
    ): TaskCreatedEventFilter;
    TaskCreated(taskID?: null, uri?: null): TaskCreatedEventFilter;

    "TaskEdited(uint256,string)"(
      taskID?: null,
      uri?: null
    ): TaskEditedEventFilter;
    TaskEdited(taskID?: null, uri?: null): TaskEditedEventFilter;

    "TaskFinalized(uint256,address)"(
      taskID?: null,
      taker?: null
    ): TaskFinalizedEventFilter;
    TaskFinalized(taskID?: null, taker?: null): TaskFinalizedEventFilter;

    "TaskSubmitted(uint256,uint256)"(
      taskID?: null,
      submissionId?: null
    ): TaskSubmittedEventFilter;
    TaskSubmitted(taskID?: null, submissionId?: null): TaskSubmittedEventFilter;

    "TaskTaken(uint256,address)"(
      taskID?: null,
      taker?: null
    ): TaskTakenEventFilter;
    TaskTaken(taskID?: null, taker?: null): TaskTakenEventFilter;
  };

  estimateGas: {
    create(
      role: BigNumberish,
      uri: string,
      startDate: BigNumberish,
      endDate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createBy(
      creator: string,
      role: BigNumberish,
      uri: string,
      startDate: BigNumberish,
      endDate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    editTask(
      taskId: BigNumberish,
      role: BigNumberish,
      uri: string,
      startDate: BigNumberish,
      endDate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    finalize(
      taskID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    finalizeFor(
      taskID: BigNumberish,
      submitter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getById(
      taskID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCompletionTime(
      taskId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStatusPerSubmitter(
      taskId: BigNumberish,
      submitter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasCompletedTheTask(
      user: string,
      taskID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<BigNumber>;

    moduleId(overrides?: CallOverrides): Promise<BigNumber>;

    novaAddress(overrides?: CallOverrides): Promise<BigNumber>;

    submit(
      taskID: BigNumberish,
      submitionUrl: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    take(
      taskID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    create(
      role: BigNumberish,
      uri: string,
      startDate: BigNumberish,
      endDate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createBy(
      creator: string,
      role: BigNumberish,
      uri: string,
      startDate: BigNumberish,
      endDate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    editTask(
      taskId: BigNumberish,
      role: BigNumberish,
      uri: string,
      startDate: BigNumberish,
      endDate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    finalize(
      taskID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    finalizeFor(
      taskID: BigNumberish,
      submitter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getById(
      taskID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCompletionTime(
      taskId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStatusPerSubmitter(
      taskId: BigNumberish,
      submitter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasCompletedTheTask(
      user: string,
      taskID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moduleId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    novaAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submit(
      taskID: BigNumberish,
      submitionUrl: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    take(
      taskID: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
