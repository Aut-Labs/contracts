/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface HackerDAOInterface extends utils.Interface {
  functions: {
    "isMember(address)": FunctionFragment;
    "join()": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "isMember" | "join"): FunctionFragment;

  encodeFunctionData(functionFragment: "isMember", values: [string]): string;
  encodeFunctionData(functionFragment: "join", values?: undefined): string;

  decodeFunctionResult(functionFragment: "isMember", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;

  events: {
    "Joined(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Joined"): EventFragment;
}

export interface JoinedEventObject {
  member: string;
}
export type JoinedEvent = TypedEvent<[string], JoinedEventObject>;

export type JoinedEventFilter = TypedEventFilter<JoinedEvent>;

export interface HackerDAO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HackerDAOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isMember(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    join(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  isMember(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  join(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  callStatic: {
    isMember(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    join(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Joined(address)"(member?: null): JoinedEventFilter;
    Joined(member?: null): JoinedEventFilter;
  };

  estimateGas: {
    isMember(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    join(overrides?: Overrides & { from?: string }): Promise<BigNumber>;
  };

  populateTransaction: {
    isMember(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    join(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
