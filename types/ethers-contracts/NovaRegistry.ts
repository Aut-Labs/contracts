/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface NovaRegistryInterface extends utils.Interface {
  functions: {
    "autIDAddr()": FunctionFragment;
    "deployNova(uint256,string,uint256)": FunctionFragment;
    "getNovaByDeployer(address)": FunctionFragment;
    "getNovas()": FunctionFragment;
    "getTrustedForwarder()": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "novas(uint256)": FunctionFragment;
    "pluginRegistry()": FunctionFragment;
    "setAllowListAddress(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "autIDAddr"
      | "deployNova"
      | "getNovaByDeployer"
      | "getNovas"
      | "getTrustedForwarder"
      | "isTrustedForwarder"
      | "novas"
      | "pluginRegistry"
      | "setAllowListAddress"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "autIDAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deployNova",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNovaByDeployer",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getNovas", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTrustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "novas", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "pluginRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowListAddress",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "autIDAddr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deployNova", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNovaByDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNovas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "novas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pluginRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowListAddress",
    data: BytesLike
  ): Result;

  events: {
    "NovaDeployed(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NovaDeployed"): EventFragment;
}

export interface NovaDeployedEventObject {
  nova: string;
}
export type NovaDeployedEvent = TypedEvent<[string], NovaDeployedEventObject>;

export type NovaDeployedEventFilter = TypedEventFilter<NovaDeployedEvent>;

export interface NovaRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NovaRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    autIDAddr(overrides?: CallOverrides): Promise<[string]>;

    deployNova(
      market: BigNumberish,
      metadata: string,
      commitment: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getNovaByDeployer(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getNovas(overrides?: CallOverrides): Promise<[string[]]>;

    getTrustedForwarder(
      overrides?: CallOverrides
    ): Promise<[string] & { forwarder: string }>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    novas(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    pluginRegistry(overrides?: CallOverrides): Promise<[string]>;

    setAllowListAddress(
      allowListAddress_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  autIDAddr(overrides?: CallOverrides): Promise<string>;

  deployNova(
    market: BigNumberish,
    metadata: string,
    commitment: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getNovaByDeployer(
    deployer: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getNovas(overrides?: CallOverrides): Promise<string[]>;

  getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  novas(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  pluginRegistry(overrides?: CallOverrides): Promise<string>;

  setAllowListAddress(
    allowListAddress_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    autIDAddr(overrides?: CallOverrides): Promise<string>;

    deployNova(
      market: BigNumberish,
      metadata: string,
      commitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getNovaByDeployer(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getNovas(overrides?: CallOverrides): Promise<string[]>;

    getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    novas(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    pluginRegistry(overrides?: CallOverrides): Promise<string>;

    setAllowListAddress(
      allowListAddress_: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NovaDeployed(address)"(nova?: null): NovaDeployedEventFilter;
    NovaDeployed(nova?: null): NovaDeployedEventFilter;
  };

  estimateGas: {
    autIDAddr(overrides?: CallOverrides): Promise<BigNumber>;

    deployNova(
      market: BigNumberish,
      metadata: string,
      commitment: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getNovaByDeployer(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNovas(overrides?: CallOverrides): Promise<BigNumber>;

    getTrustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    novas(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    pluginRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    setAllowListAddress(
      allowListAddress_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    autIDAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployNova(
      market: BigNumberish,
      metadata: string,
      commitment: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getNovaByDeployer(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNovas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTrustedForwarder(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    novas(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pluginRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAllowListAddress(
      allowListAddress_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
