/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface DAOMembersInterface extends utils.Interface {
  functions: {
    "addAdmin(address)": FunctionFragment;
    "addAdmins(address[])": FunctionFragment;
    "admins(uint256)": FunctionFragment;
    "canJoin(address,uint256)": FunctionFragment;
    "getAdmins()": FunctionFragment;
    "getAllMembers()": FunctionFragment;
    "getAutIDAddress()": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "isMember(address)": FunctionFragment;
    "join(address,uint256)": FunctionFragment;
    "memberCount()": FunctionFragment;
    "members(uint256)": FunctionFragment;
    "removeAdmin(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAdmin"
      | "addAdmins"
      | "admins"
      | "canJoin"
      | "getAdmins"
      | "getAllMembers"
      | "getAutIDAddress"
      | "isAdmin"
      | "isMember"
      | "join"
      | "memberCount"
      | "members"
      | "removeAdmin"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "addAdmins", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "admins",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canJoin",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getAdmins", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllMembers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAutIDAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "isMember", values: [string]): string;
  encodeFunctionData(
    functionFragment: "join",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "memberCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "members",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "removeAdmin", values: [string]): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAdmins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canJoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAdmins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAutIDAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMember", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "memberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;

  events: {
    "AdminMemberAdded(address)": EventFragment;
    "AdminMemberRemoved(address)": EventFragment;
    "MemberAdded()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminMemberAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminMemberRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberAdded"): EventFragment;
}

export interface AdminMemberAddedEventObject {
  member: string;
}
export type AdminMemberAddedEvent = TypedEvent<
  [string],
  AdminMemberAddedEventObject
>;

export type AdminMemberAddedEventFilter =
  TypedEventFilter<AdminMemberAddedEvent>;

export interface AdminMemberRemovedEventObject {
  member: string;
}
export type AdminMemberRemovedEvent = TypedEvent<
  [string],
  AdminMemberRemovedEventObject
>;

export type AdminMemberRemovedEventFilter =
  TypedEventFilter<AdminMemberRemovedEvent>;

export interface MemberAddedEventObject {}
export type MemberAddedEvent = TypedEvent<[], MemberAddedEventObject>;

export type MemberAddedEventFilter = TypedEventFilter<MemberAddedEvent>;

export interface DAOMembers extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DAOMembersInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAdmin(
      member: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addAdmins(
      adminAddr: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    admins(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    canJoin(
      member: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getAdmins(overrides?: CallOverrides): Promise<[string[]]>;

    getAllMembers(overrides?: CallOverrides): Promise<[string[]]>;

    getAutIDAddress(overrides?: CallOverrides): Promise<[string]>;

    isAdmin(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isMember(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    join(
      newMember: string,
      role: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    memberCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    members(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    removeAdmin(
      member: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addAdmin(
    member: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addAdmins(
    adminAddr: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  admins(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  canJoin(
    member: string,
    role: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getAdmins(overrides?: CallOverrides): Promise<string[]>;

  getAllMembers(overrides?: CallOverrides): Promise<string[]>;

  getAutIDAddress(overrides?: CallOverrides): Promise<string>;

  isAdmin(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isMember(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  join(
    newMember: string,
    role: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  memberCount(overrides?: CallOverrides): Promise<BigNumber>;

  members(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  removeAdmin(
    member: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAdmin(member: string, overrides?: CallOverrides): Promise<void>;

    addAdmins(
      adminAddr: string[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    admins(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    canJoin(
      member: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAdmins(overrides?: CallOverrides): Promise<string[]>;

    getAllMembers(overrides?: CallOverrides): Promise<string[]>;

    getAutIDAddress(overrides?: CallOverrides): Promise<string>;

    isAdmin(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isMember(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    join(
      newMember: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    memberCount(overrides?: CallOverrides): Promise<BigNumber>;

    members(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    removeAdmin(member: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AdminMemberAdded(address)"(member?: null): AdminMemberAddedEventFilter;
    AdminMemberAdded(member?: null): AdminMemberAddedEventFilter;

    "AdminMemberRemoved(address)"(member?: null): AdminMemberRemovedEventFilter;
    AdminMemberRemoved(member?: null): AdminMemberRemovedEventFilter;

    "MemberAdded()"(): MemberAddedEventFilter;
    MemberAdded(): MemberAddedEventFilter;
  };

  estimateGas: {
    addAdmin(
      member: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addAdmins(
      adminAddr: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    admins(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    canJoin(
      member: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdmins(overrides?: CallOverrides): Promise<BigNumber>;

    getAllMembers(overrides?: CallOverrides): Promise<BigNumber>;

    getAutIDAddress(overrides?: CallOverrides): Promise<BigNumber>;

    isAdmin(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isMember(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    join(
      newMember: string,
      role: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    memberCount(overrides?: CallOverrides): Promise<BigNumber>;

    members(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    removeAdmin(
      member: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAdmin(
      member: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addAdmins(
      adminAddr: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    admins(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canJoin(
      member: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdmins(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllMembers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAutIDAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAdmin(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMember(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    join(
      newMember: string,
      role: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    memberCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    members(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAdmin(
      member: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
