/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IModuleInterface extends utils.Interface {
  functions: {
    "isActive()": FunctionFragment;
    "moduleId()": FunctionFragment;
    "hubAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "isActive" | "moduleId" | "hubAddress"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(functionFragment: "moduleId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hubAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "moduleId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hubAddress",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isActive(overrides?: CallOverrides): Promise<[boolean]>;

    moduleId(overrides?: CallOverrides): Promise<[BigNumber]>;

    hubAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  isActive(overrides?: CallOverrides): Promise<boolean>;

  moduleId(overrides?: CallOverrides): Promise<BigNumber>;

  hubAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    isActive(overrides?: CallOverrides): Promise<boolean>;

    moduleId(overrides?: CallOverrides): Promise<BigNumber>;

    hubAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    isActive(overrides?: CallOverrides): Promise<BigNumber>;

    moduleId(overrides?: CallOverrides): Promise<BigNumber>;

    hubAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moduleId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hubAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
