/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IModuleRegistry {
  export type ModuleDefinitionStruct = {
    metadataURI: string;
    id: BigNumberish;
  };

  export type ModuleDefinitionStructOutput = [string, BigNumber] & {
    metadataURI: string;
    id: BigNumber;
  };
}

export interface IModuleRegistryInterface extends utils.Interface {
  functions: {
    "addModuleDefinition(string)": FunctionFragment;
    "getAllModules()": FunctionFragment;
    "getModuleById(uint256)": FunctionFragment;
    "updateMetadataURI(uint256,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addModuleDefinition"
      | "getAllModules"
      | "getModuleById"
      | "updateMetadataURI"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addModuleDefinition",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllModules",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getModuleById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMetadataURI",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addModuleDefinition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllModules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getModuleById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMetadataURI",
    data: BytesLike
  ): Result;

  events: {
    "ModuleDefinitionAdded(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ModuleDefinitionAdded"): EventFragment;
}

export interface ModuleDefinitionAddedEventObject {
  id: BigNumber;
}
export type ModuleDefinitionAddedEvent = TypedEvent<
  [BigNumber],
  ModuleDefinitionAddedEventObject
>;

export type ModuleDefinitionAddedEventFilter =
  TypedEventFilter<ModuleDefinitionAddedEvent>;

export interface IModuleRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IModuleRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addModuleDefinition(
      metadataURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAllModules(
      overrides?: CallOverrides
    ): Promise<[IModuleRegistry.ModuleDefinitionStructOutput[]]>;

    getModuleById(
      moduleID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IModuleRegistry.ModuleDefinitionStructOutput]>;

    updateMetadataURI(
      moduleId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addModuleDefinition(
    metadataURI: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAllModules(
    overrides?: CallOverrides
  ): Promise<IModuleRegistry.ModuleDefinitionStructOutput[]>;

  getModuleById(
    moduleID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IModuleRegistry.ModuleDefinitionStructOutput>;

  updateMetadataURI(
    moduleId: BigNumberish,
    uri: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addModuleDefinition(
      metadataURI: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllModules(
      overrides?: CallOverrides
    ): Promise<IModuleRegistry.ModuleDefinitionStructOutput[]>;

    getModuleById(
      moduleID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IModuleRegistry.ModuleDefinitionStructOutput>;

    updateMetadataURI(
      moduleId: BigNumberish,
      uri: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ModuleDefinitionAdded(uint256)"(
      id?: null
    ): ModuleDefinitionAddedEventFilter;
    ModuleDefinitionAdded(id?: null): ModuleDefinitionAddedEventFilter;
  };

  estimateGas: {
    addModuleDefinition(
      metadataURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getAllModules(overrides?: CallOverrides): Promise<BigNumber>;

    getModuleById(
      moduleID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateMetadataURI(
      moduleId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addModuleDefinition(
      metadataURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAllModules(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getModuleById(
      moduleID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateMetadataURI(
      moduleId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
