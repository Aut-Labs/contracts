/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface DAOModulesInterface extends utils.Interface {
  functions: {
    "activateModule(uint256)": FunctionFragment;
    "isModuleActivated(uint256)": FunctionFragment;
    "pluginRegistry()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activateModule"
      | "isModuleActivated"
      | "pluginRegistry"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activateModule",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isModuleActivated",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pluginRegistry",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "activateModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isModuleActivated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pluginRegistry",
    data: BytesLike
  ): Result;

  events: {
    "ModuleActivated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ModuleActivated"): EventFragment;
}

export interface ModuleActivatedEventObject {
  moduleId: BigNumber;
}
export type ModuleActivatedEvent = TypedEvent<
  [BigNumber],
  ModuleActivatedEventObject
>;

export type ModuleActivatedEventFilter = TypedEventFilter<ModuleActivatedEvent>;

export interface DAOModules extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DAOModulesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activateModule(
      moduleId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isModuleActivated(
      moduleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pluginRegistry(overrides?: CallOverrides): Promise<[string]>;
  };

  activateModule(
    moduleId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isModuleActivated(
    moduleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pluginRegistry(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    activateModule(
      moduleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isModuleActivated(
      moduleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pluginRegistry(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ModuleActivated(uint256)"(moduleId?: null): ModuleActivatedEventFilter;
    ModuleActivated(moduleId?: null): ModuleActivatedEventFilter;
  };

  estimateGas: {
    activateModule(
      moduleId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isModuleActivated(
      moduleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pluginRegistry(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    activateModule(
      moduleId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isModuleActivated(
      moduleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pluginRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
