/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IPluginRegistry {
  export type PluginInstanceStruct = {
    pluginAddress: string;
    pluginDefinitionId: BigNumberish;
  };

  export type PluginInstanceStructOutput = [string, BigNumber] & {
    pluginAddress: string;
    pluginDefinitionId: BigNumber;
  };
}

export interface IPluginRegistryInterface extends utils.Interface {
  functions: {
    "addPluginDefinition(address,string,uint256,bool,uint256[])": FunctionFragment;
    "addPluginToDAO(address,uint256)": FunctionFragment;
    "defaultLRAddr()": FunctionFragment;
    "editPluginDefinitionMetadata(uint256,string)": FunctionFragment;
    "getOwnerOfPlugin(address)": FunctionFragment;
    "getPluginIdsByDAO(address)": FunctionFragment;
    "getPluginInstanceByTokenId(uint256)": FunctionFragment;
    "modulesRegistry()": FunctionFragment;
    "owner()": FunctionFragment;
    "pluginDefinitionsInstalledByDAO(address,uint256)": FunctionFragment;
    "setDefaulLRAddress(address)": FunctionFragment;
    "tokenIdFromAddress(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addPluginDefinition"
      | "addPluginToDAO"
      | "defaultLRAddr"
      | "editPluginDefinitionMetadata"
      | "getOwnerOfPlugin"
      | "getPluginIdsByDAO"
      | "getPluginInstanceByTokenId"
      | "modulesRegistry"
      | "owner"
      | "pluginDefinitionsInstalledByDAO"
      | "setDefaulLRAddress"
      | "tokenIdFromAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPluginDefinition",
    values: [string, string, BigNumberish, boolean, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addPluginToDAO",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultLRAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "editPluginDefinitionMetadata",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerOfPlugin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPluginIdsByDAO",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPluginInstanceByTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "modulesRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pluginDefinitionsInstalledByDAO",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaulLRAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdFromAddress",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addPluginDefinition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPluginToDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultLRAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editPluginDefinitionMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerOfPlugin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPluginIdsByDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPluginInstanceByTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modulesRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pluginDefinitionsInstalledByDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaulLRAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdFromAddress",
    data: BytesLike
  ): Result;

  events: {
    "DefaultLRAlgoChanged(address,address)": EventFragment;
    "PluginAddedToDAO(uint256,uint256,address)": EventFragment;
    "PluginDefinitionAdded(uint256)": EventFragment;
    "PluginRegistered(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DefaultLRAlgoChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PluginAddedToDAO"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PluginDefinitionAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PluginRegistered"): EventFragment;
}

export interface DefaultLRAlgoChangedEventObject {
  newReputationAlgo: string;
  previousAddress: string;
}
export type DefaultLRAlgoChangedEvent = TypedEvent<
  [string, string],
  DefaultLRAlgoChangedEventObject
>;

export type DefaultLRAlgoChangedEventFilter =
  TypedEventFilter<DefaultLRAlgoChangedEvent>;

export interface PluginAddedToDAOEventObject {
  tokenId: BigNumber;
  pluginTypeId: BigNumber;
  dao: string;
}
export type PluginAddedToDAOEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  PluginAddedToDAOEventObject
>;

export type PluginAddedToDAOEventFilter =
  TypedEventFilter<PluginAddedToDAOEvent>;

export interface PluginDefinitionAddedEventObject {
  pluginTypeId: BigNumber;
}
export type PluginDefinitionAddedEvent = TypedEvent<
  [BigNumber],
  PluginDefinitionAddedEventObject
>;

export type PluginDefinitionAddedEventFilter =
  TypedEventFilter<PluginDefinitionAddedEvent>;

export interface PluginRegisteredEventObject {
  tokenId: BigNumber;
  pluginAddress: string;
}
export type PluginRegisteredEvent = TypedEvent<
  [BigNumber, string],
  PluginRegisteredEventObject
>;

export type PluginRegisteredEventFilter =
  TypedEventFilter<PluginRegisteredEvent>;

export interface IPluginRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPluginRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPluginDefinition(
      creator: string,
      metadataURI: string,
      price: BigNumberish,
      canBeStandalone: boolean,
      moduleDependencies: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addPluginToDAO(
      pluginAddress: string,
      pluginDefinitionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    defaultLRAddr(overrides?: CallOverrides): Promise<[string]>;

    editPluginDefinitionMetadata(
      pluginDefinitionId: BigNumberish,
      url: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getOwnerOfPlugin(
      pluginAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPluginIdsByDAO(
      dao: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getPluginInstanceByTokenId(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IPluginRegistry.PluginInstanceStructOutput]>;

    modulesRegistry(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pluginDefinitionsInstalledByDAO(
      dao: string,
      pluginTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setDefaulLRAddress(
      LR: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    tokenIdFromAddress(
      pluginAddress_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  addPluginDefinition(
    creator: string,
    metadataURI: string,
    price: BigNumberish,
    canBeStandalone: boolean,
    moduleDependencies: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addPluginToDAO(
    pluginAddress: string,
    pluginDefinitionId: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  defaultLRAddr(overrides?: CallOverrides): Promise<string>;

  editPluginDefinitionMetadata(
    pluginDefinitionId: BigNumberish,
    url: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getOwnerOfPlugin(
    pluginAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getPluginIdsByDAO(
    dao: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPluginInstanceByTokenId(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IPluginRegistry.PluginInstanceStructOutput>;

  modulesRegistry(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pluginDefinitionsInstalledByDAO(
    dao: string,
    pluginTypeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setDefaulLRAddress(
    LR: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  tokenIdFromAddress(
    pluginAddress_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addPluginDefinition(
      creator: string,
      metadataURI: string,
      price: BigNumberish,
      canBeStandalone: boolean,
      moduleDependencies: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addPluginToDAO(
      pluginAddress: string,
      pluginDefinitionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultLRAddr(overrides?: CallOverrides): Promise<string>;

    editPluginDefinitionMetadata(
      pluginDefinitionId: BigNumberish,
      url: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getOwnerOfPlugin(
      pluginAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getPluginIdsByDAO(
      dao: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPluginInstanceByTokenId(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IPluginRegistry.PluginInstanceStructOutput>;

    modulesRegistry(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pluginDefinitionsInstalledByDAO(
      dao: string,
      pluginTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setDefaulLRAddress(LR: string, overrides?: CallOverrides): Promise<void>;

    tokenIdFromAddress(
      pluginAddress_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "DefaultLRAlgoChanged(address,address)"(
      newReputationAlgo?: null,
      previousAddress?: null
    ): DefaultLRAlgoChangedEventFilter;
    DefaultLRAlgoChanged(
      newReputationAlgo?: null,
      previousAddress?: null
    ): DefaultLRAlgoChangedEventFilter;

    "PluginAddedToDAO(uint256,uint256,address)"(
      tokenId?: BigNumberish | null,
      pluginTypeId?: BigNumberish | null,
      dao?: string | null
    ): PluginAddedToDAOEventFilter;
    PluginAddedToDAO(
      tokenId?: BigNumberish | null,
      pluginTypeId?: BigNumberish | null,
      dao?: string | null
    ): PluginAddedToDAOEventFilter;

    "PluginDefinitionAdded(uint256)"(
      pluginTypeId?: BigNumberish | null
    ): PluginDefinitionAddedEventFilter;
    PluginDefinitionAdded(
      pluginTypeId?: BigNumberish | null
    ): PluginDefinitionAddedEventFilter;

    "PluginRegistered(uint256,address)"(
      tokenId?: BigNumberish | null,
      pluginAddress?: string | null
    ): PluginRegisteredEventFilter;
    PluginRegistered(
      tokenId?: BigNumberish | null,
      pluginAddress?: string | null
    ): PluginRegisteredEventFilter;
  };

  estimateGas: {
    addPluginDefinition(
      creator: string,
      metadataURI: string,
      price: BigNumberish,
      canBeStandalone: boolean,
      moduleDependencies: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addPluginToDAO(
      pluginAddress: string,
      pluginDefinitionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    defaultLRAddr(overrides?: CallOverrides): Promise<BigNumber>;

    editPluginDefinitionMetadata(
      pluginDefinitionId: BigNumberish,
      url: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getOwnerOfPlugin(
      pluginAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPluginIdsByDAO(
      dao: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPluginInstanceByTokenId(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modulesRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pluginDefinitionsInstalledByDAO(
      dao: string,
      pluginTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDefaulLRAddress(
      LR: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    tokenIdFromAddress(
      pluginAddress_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPluginDefinition(
      creator: string,
      metadataURI: string,
      price: BigNumberish,
      canBeStandalone: boolean,
      moduleDependencies: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addPluginToDAO(
      pluginAddress: string,
      pluginDefinitionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    defaultLRAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    editPluginDefinitionMetadata(
      pluginDefinitionId: BigNumberish,
      url: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getOwnerOfPlugin(
      pluginAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPluginIdsByDAO(
      dao: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPluginInstanceByTokenId(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modulesRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pluginDefinitionsInstalledByDAO(
      dao: string,
      pluginTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDefaulLRAddress(
      LR: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    tokenIdFromAddress(
      pluginAddress_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
