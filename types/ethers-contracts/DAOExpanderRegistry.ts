/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface DAOExpanderRegistryInterface extends utils.Interface {
  functions: {
    "autIDAddr()": FunctionFragment;
    "daoExpanders(uint256)": FunctionFragment;
    "daoTypes()": FunctionFragment;
    "deployDAOExpander(uint256,address,uint256,string,uint256)": FunctionFragment;
    "getDAOExpanders()": FunctionFragment;
    "getDAOExpandersByDeployer(address)": FunctionFragment;
    "getTrustedForwarder()": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "pluginRegistryAddr()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "autIDAddr"
      | "daoExpanders"
      | "daoTypes"
      | "deployDAOExpander"
      | "getDAOExpanders"
      | "getDAOExpandersByDeployer"
      | "getTrustedForwarder"
      | "isTrustedForwarder"
      | "pluginRegistryAddr"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "autIDAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "daoExpanders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "daoTypes", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deployDAOExpander",
    values: [BigNumberish, string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDAOExpanders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDAOExpandersByDeployer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pluginRegistryAddr",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "autIDAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "daoExpanders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daoTypes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployDAOExpander",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDAOExpanders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDAOExpandersByDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pluginRegistryAddr",
    data: BytesLike
  ): Result;

  events: {
    "DAOExpanderDeployed(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DAOExpanderDeployed"): EventFragment;
}

export interface DAOExpanderDeployedEventObject {
  newDAOExpander: string;
}
export type DAOExpanderDeployedEvent = TypedEvent<
  [string],
  DAOExpanderDeployedEventObject
>;

export type DAOExpanderDeployedEventFilter =
  TypedEventFilter<DAOExpanderDeployedEvent>;

export interface DAOExpanderRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DAOExpanderRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    autIDAddr(overrides?: CallOverrides): Promise<[string]>;

    daoExpanders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    daoTypes(overrides?: CallOverrides): Promise<[string]>;

    deployDAOExpander(
      daoType: BigNumberish,
      daoAddr: string,
      market: BigNumberish,
      metadata: string,
      commitment: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getDAOExpanders(overrides?: CallOverrides): Promise<[string[]]>;

    getDAOExpandersByDeployer(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getTrustedForwarder(
      overrides?: CallOverrides
    ): Promise<[string] & { forwarder: string }>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pluginRegistryAddr(overrides?: CallOverrides): Promise<[string]>;
  };

  autIDAddr(overrides?: CallOverrides): Promise<string>;

  daoExpanders(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  daoTypes(overrides?: CallOverrides): Promise<string>;

  deployDAOExpander(
    daoType: BigNumberish,
    daoAddr: string,
    market: BigNumberish,
    metadata: string,
    commitment: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getDAOExpanders(overrides?: CallOverrides): Promise<string[]>;

  getDAOExpandersByDeployer(
    deployer: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pluginRegistryAddr(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    autIDAddr(overrides?: CallOverrides): Promise<string>;

    daoExpanders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    daoTypes(overrides?: CallOverrides): Promise<string>;

    deployDAOExpander(
      daoType: BigNumberish,
      daoAddr: string,
      market: BigNumberish,
      metadata: string,
      commitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getDAOExpanders(overrides?: CallOverrides): Promise<string[]>;

    getDAOExpandersByDeployer(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pluginRegistryAddr(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DAOExpanderDeployed(address)"(
      newDAOExpander?: null
    ): DAOExpanderDeployedEventFilter;
    DAOExpanderDeployed(newDAOExpander?: null): DAOExpanderDeployedEventFilter;
  };

  estimateGas: {
    autIDAddr(overrides?: CallOverrides): Promise<BigNumber>;

    daoExpanders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daoTypes(overrides?: CallOverrides): Promise<BigNumber>;

    deployDAOExpander(
      daoType: BigNumberish,
      daoAddr: string,
      market: BigNumberish,
      metadata: string,
      commitment: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getDAOExpanders(overrides?: CallOverrides): Promise<BigNumber>;

    getDAOExpandersByDeployer(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTrustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pluginRegistryAddr(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    autIDAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daoExpanders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    daoTypes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployDAOExpander(
      daoType: BigNumberish,
      daoAddr: string,
      market: BigNumberish,
      metadata: string,
      commitment: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getDAOExpanders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDAOExpandersByDeployer(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTrustedForwarder(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pluginRegistryAddr(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
